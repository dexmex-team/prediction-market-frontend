{"version":3,"sources":["state/predictions/hooks.ts","hooks/usePersistState.ts","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","hooks/useCallWithGasPrice.ts","views/Predictions/components/History/Header.tsx","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","utils/getTimePeriods.ts","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","useGetSortedRounds","roundData","orderBy","values","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","account","history","useGetLastOraclePrice","lastOraclePrice","useMemo","ethers","BigNumber","from","useGetCurrentRoundLockTimestamp","currentRound","useGetCurrentRound","lockTimestamp","startTimestamp","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","useGetLatestOraclePrice","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","useWeb3React","earliestEpoch","earliestRound","minBy","current","PredictionStatus","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","style","flex","onClick","setHistoryPaneState","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","destroySwiper","destroy","tradingViewListener","Promise","resolve","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","Notification","title","mb","ErrorNotification","as","variant","width","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","useCallWithGasPrice","gasPrice","useGasPrice","callWithGasPrice","useCallback","methodName","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","tx","HistoryTabs","Modal","ModalContainer","CollectRoundWinningsModal","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","betPayout","REWARD_RATE","fetchNodeHistory","handleClick","wait","receipt","Toast","txHash","transactionHash","console","data","message","minWidth","mt","p","alignItems","justifyContent","textAlign","toFixed","color","fontSize","join","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","mx","LockPriceRow","Background","Box","isNext","isLive","hasEntered","secondary","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","log","ledger","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","mr","getHeaderText","getHeaderIcon","claimedHash","href","getPolygonScanLink","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","external","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","Header","activeTab","setActiveTab","handleChange","newFilter","setHistoryFilter","switchTab","tabIndex","HistoryFilter","ALL","size","activeIndex","onItemClick","ROUNDS","checked","onChange","COLLECTED","UNCOLLECTED","RoundsTab","hasBetHistory","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","backgroundDisabled","initialPnlSummary","bestRound","entered","PnlTab","summary","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","flexDirection","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","fetchHistory","fetchAccountHistory","results","getFilteredBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","type","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","fontWeight","outline","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","hasRoundFailed","RoundProgress","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","isBull","priceColor","priceAsNumber","parseFloat","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","isTxPending","setIsTxPending","errorMessage","setErrorMessage","setPercent","maticBalance","useGetmaticBalance","balance","minBetAmount","useGetMinBetAmount","maticBalanceAsBn","maxBalance","balanceDisplay","formatBigNumber","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","mulUnsafe","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","toUnsafeFloat","isWarning","inputProps","percentShortcut","OpenRoundCard","isSettingPosition","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","toUpperCase","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","e","stopPropagation","getNow","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","countdown","RoundCard","ledgers","useGetBetByEpoch","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","display","TimerLabel","unit","currentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","TimerLabelWrapper","HistoryButtonWrapper","Menu","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","CHART_LOCAL_STORAGE_KEY","Ul","ul","ChartDisclaimer","doNotShow","setDoNowShow","src","Predictions","isDesktop","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","PageLoader"],"mappings":"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","file":"static/js/7.faa27c32.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets[account] ?? []\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 10) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status !== PredictionStatus.INITIAL) {\n      timer.current = setInterval(async () => {\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n        dispatch(fetchRounds(liveCurrentAndRecent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button } from '@dexmex/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n          {t('Collect Winnings')}\n        </Button>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@dexmex/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:ETHUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@dexmex/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout - bet.amount\n}\n","import { useCallback } from 'react'\nimport ethers, { Contract, CallOverrides } from 'ethers'\nimport { useGasPrice } from 'state/user/hooks'\nimport { get } from 'lodash'\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides = null,\n    ): Promise<ethers.providers.TransactionResponse> => {\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ArrowForwardIcon, Box, Button, Radio, Flex, Heading, Text, ButtonMenu, ButtonMenuItem } from '@dexmex/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  margin-bottom: 16px;\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  ModalCloseButton,\n} from '@dexmex/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { fetchClaimableStatuses, fetchNodeHistory } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useGetHistoryByAccount } from 'state/predictions/hooks'\nimport { getPayout } from './History/helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n  const dispatch = useAppDispatch()\n  const history = useGetHistoryByAccount(account)\n\n  const { epochs, total } = history.reduce(\n    (accum, bet) => {\n      if (!bet.claimed && bet.position === bet.round.position) {\n        const betPayout = getPayout(bet, REWARD_RATE)\n        return {\n          ...accum,\n          epochs: [...accum.epochs, bet.round.epoch],\n          total: accum.total + betPayout,\n        }\n      }\n\n      return accum\n    },\n    { epochs: [], total: 0 },\n  )\n\n  useEffect(() => {\n    // Fetch history if they have not opened the history pane yet\n    if (!history) {\n      dispatch(fetchNodeHistory(account))\n    }\n  }, [account, history, dispatch])\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs])\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      await dispatch(fetchClaimableStatuses({ account, epochs }))\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your prizes have been sent to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      console.error('Unable to claim winnings', error)\n      toastError(\n        t('Error'),\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${total.toFixed(4)} MATIC`}</Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {epochs.length === 1\n              ? t('From round %round%', { round: epochs[0] })\n              : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\n          </Text>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@dexmex/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({ hasClaimed, onSuccess, children, ...props }) => {\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal onSuccess={onSuccess} />, false)\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import { ethers } from 'ethers'\nimport { NodeRound } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\n}\n\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\n  const value = bnb || ethers.BigNumber.from(0)\n  return formatBigNumberToFixed(value, 3)\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\n  const now = Date.now()\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true\n  }\n\n  return false\n}\n\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@dexmex/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} MATIC`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} MATIC`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} MATIC`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { BoxProps, Flex, Skeleton, Text } from '@dexmex/uikit'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getBetPosition(closePrice, lockPrice)\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {closePrice ? (\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n              {formatUsdv2(closePrice)}\n            </Text>\n          ) : (\n            <Skeleton height=\"34px\" my=\"1px\" />\n          )}\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@dexmex/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const refundable = await predictionsContract.refundable(epoch, account)\n\n      if (refundable) {\n        console.log(epoch)\n        console.log(refundable)\n\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account)\n        setIsRefundable(ledger.claimed === false)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getPolygonScanLink } from 'utils'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} width=\"100%\" mb=\"16px\" onSuccess={handleSuccess}>\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && bet.claimedHash && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getPolygonScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on Polygonscan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} MATIC`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} MATIC`}</Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} MATIC`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPolygonScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from '@dexmex/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      {bet.round.lockBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Opening Block')}</Text>\n          <Link href={getPolygonScanLink(bet.round.lockBlock, 'block')} external>\n            {bet.round.lockBlock}\n          </Link>\n        </Flex>\n      )}\n      {bet.round.closeBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text>{t('Closing Block')}</Text>\n          <Link href={getPolygonScanLink(bet.round.closeBlock, 'block')} external>\n            {bet.round.closeBlock}\n          </Link>\n        </Flex>\n      )}\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@dexmex/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <>\n      <Box p=\"24px\">\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n          {t('No prediction history available')}\n        </Heading>\n        <Text as=\"p\" textAlign=\"center\">\n          {t(\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n          )}\n        </Text>\n      </Box>\n    </>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@dexmex/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { getPolygonScanLink } from 'utils'\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, REWARD_RATE)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.epoch.toString(), payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} MATIC`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} MATIC`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} MATIC`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} MATIC`}</Text>\n\n        <Divider />\n\n        {/*\n        <SummaryRow type=\"won\" summary={summary} MATICBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} MATICBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} MATICBusdPrice={bnbBusdPrice} />\n        */}\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getPolygonScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@dexmex/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory, fetchNodeHistory } from 'state/predictions'\nimport { getFilteredBets } from 'state/predictions/helpers'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/predictions/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    const fetchAccountHistory = async () => {\n      await dispatch(fetchNodeHistory(account))\n      dispatch(fetchHistory({ account }))\n    }\n\n    if (account && isHistoryPaneOpen) {\n      fetchAccountHistory()\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  const results = getFilteredBets(bets, historyFilter)\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <ConnectWalletButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@dexmex/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: ethers.BigNumber\n  hasClaimed?: boolean\n}\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} MATIC`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <Tag\n          variant=\"secondary\"\n          fontWeight=\"bold\"\n          textTransform=\"uppercase\"\n          outline={!hasClaimed}\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\n        >\n          {hasClaimed ? t('Claimed') : t('Entered')}\n        </Tag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  hasClaimed?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  hasClaimed = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box mt=\"-1px\" position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box mb=\"-1px\" position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@dexmex/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  icon?: ReactElement\n}\n\nconst HEADER_HEIGHT = '37px'\n\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\n// that header is overlapping the 1px card border.\n// 'live' is not included into the switch case because it has isActive border style\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\n  switch (status) {\n    case 'calculating':\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\n    case 'canceled':\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'next':\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  display: flex;\n  justify-content: space-between;\n  height: ${HEADER_HEIGHT};\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch } = round\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Box, BlockIcon, CardBody } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useGetBufferSeconds } from 'state/predictions/hooks'\nimport useTheme from 'hooks/useTheme'\nimport { getHasRoundFailed } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  hasClaimedUp: boolean\n  hasClaimedDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  hasClaimedUp,\n  hasClaimedDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { epoch, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bufferSeconds = useGetBufferSeconds()\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (!closePrice) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n            hasClaimed={hasClaimedUp}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            hasClaimed={hasClaimedDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      {/* <CollectWinningsOverlay epoch={epoch} isBottom={hasEnteredDown} /> */}\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@dexmex/uikit'\n\ninterface RoundProgressProps extends ProgressProps {\n  lockTimestamp: number\n  closeTimestamp: number\n}\n\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\n  const startMs = lockTimestamp * 1000\n  const endMs = closeTimestamp * 1000\n  const now = Date.now()\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default RoundProgress\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Card, CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const now = Date.now()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (now > closeTimestamp * 1000) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@dexmex/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@dexmex/uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetmaticBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  epoch: number\n  onBack: () => void\n  onSuccess: (hash: string) => Promise<void>\n}\n\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  maticBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(maticBalance)\n    }\n    return maticBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient MATIC balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: maticBalance } = useGetmaticBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n\n  // Convert MATIC balance to ethers.BigNumber\n  const maticBalanceAsBn = useMemo(() => {\n    return ethers.BigNumber.from(maticBalance.toString())\n  }, [maticBalance])\n  const maxBalance = useMemo(() => {\n    return maticBalanceAsBn.gt(dust) ? maticBalanceAsBn.sub(dust) : dust\n  }, [maticBalanceAsBn])\n  const balanceDisplay = formatBigNumber(maticBalanceAsBn)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(receipt.transactionHash)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient MATIC balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <Text bold textTransform=\"uppercase\">\n              MATIC\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <ConnectWalletButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} MATIC`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = async (newPosition: BetPosition) => {\n    console.log('position')\n\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (hash: string) => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={hash}>\n        {t('%position% position entered', {\n          position: positionDisplay,\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  /*\n  useEffect(() => {\n    console.log(isSettingPosition)\n  }, [isSettingPosition, round, bullMultiplier, bearMultiplier, betAmount])\n\n  */\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    handleSetPosition(BetPosition.BULL)\n                  }}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    handleSetPosition(BetPosition.BEAR)\n                  }}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n","import React from 'react'\nimport { Card, CardBody, Text, WaitIcon } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatRoundTime } from '../../helpers'\nimport useCountdown from '../../hooks/useCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const intervalSeconds = useGetIntervalSeconds()\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierv2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\n\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      hasClaimedDown={hasClaimedDown}\n      hasClaimedUp={hasClaimedUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedBearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@dexmex/uikit'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useCountdown from '../hooks/useCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\n  background-color: ${({ theme }) => theme.card.background};\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: ${({ theme }) => theme.radii.card};\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          ETHUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {secondsRemaining === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Flex)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background-color: ${({ theme }) => theme.card.background};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@dexmex/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@dexmex/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import { useEffect } from 'react'\nimport usePrevious from 'hooks/usePreviousValue'\nimport useSwiper from './useSwiper'\nimport { PageView } from '../types'\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\n  const { swiper } = useSwiper()\n  const prevView = usePrevious(view)\n\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1)\n    }\n  }, [swiper, prevView, view, liveSwiperIndex])\n}\n\nexport default useOnViewChange\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@dexmex/uikit'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\nimport useOnViewChange from './hooks/useOnViewChange'\nimport { PageView } from './types'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const currentEpoch = useGetCurrentEpoch()\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\n  const swiperIndex = rounds.indexOf(previousRound)\n\n  useOnNextRound()\n  useOnViewChange(swiperIndex, view)\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={swiperIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","export enum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@dexmex/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@dexmex/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@dexmex/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@dexmex/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport { PageView } from './types'\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  InjectedModalProps,\n  LinkExternal,\n  Flex,\n  Image,\n  Heading,\n  Checkbox,\n  Box,\n} from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport usePersistState from 'hooks/usePersistState'\nimport { useTranslation } from 'contexts/Localization'\n\nexport const CHART_LOCAL_STORAGE_KEY = 'pcs_chart_do_not_show'\n\nconst Ul = styled.ul`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  list-style-position: outside;\n  margin-left: 16px;\n\n  & > li {\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`\n\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [doNotShow, setDoNowShow] = usePersistState(false, { localStorageKey: CHART_LOCAL_STORAGE_KEY })\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Flex justifyContent=\"center\" mb=\"32px\">\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\n        </Flex>\n        <Heading as=\"h3\" size=\"sm\">\n          {t('Warning')}:\n        </Heading>\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\n          {t('Prices shown on cards and charts are different')}:\n        </Heading>\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\n          {t('The price you see come from difference places')}:\n        </Text>\n        <Ul>\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\n        </Ul>\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\n        </Text>\n        <Box>\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n            {t('I understand')}\n          </Button>\n        </Box>\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n          <Flex alignItems=\"center\">\n            <div style={{ flex: 'none' }}>\n              <Checkbox id=\"checkbox\" scale=\"sm\" checked={doNotShow} onChange={() => setDoNowShow(!doNotShow)} />\n            </div>\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\n          </Flex>\n        </label>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@dexmex/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk-2',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (isChartPaneOpen) {\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY))\n\n      if (showChartDisclaimer !== true) {\n        onPresentChartDisclaimerRef.current()\n      }\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"],"sourceRoot":""}