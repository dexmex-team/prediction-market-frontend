{"version":3,"sources":["hooks/useTokenBalance.ts","utils/wallet.ts","hooks/useAuth.ts","components/Toast/types.ts","components/Toast/Toast.tsx","components/Toast/ToastContainer.tsx","utils/truncateHash.ts","components/Toast/DescriptionWithTx.tsx","state/global/actions.ts","state/user/reducer.ts","state/transactions/reducer.ts","state/multicall/reducer.ts","state/index.ts","hooks/useToast.ts","state/block/hooks.ts","utils/getRpcUrl.ts","contexts/ToastsContext/Provider.tsx","contexts/ToastsContext/Listener.tsx","utils/web3React.ts","state/predictions/config.ts","state/user/hooks/index.tsx","state/block/index.ts","contexts/RefreshContext.tsx","state/predictions/index.ts","utils/formatBalance.ts","hooks/useTheme.ts","config/abi/erc20.ts","hooks/useContract.ts","components/ConnectWalletButton.tsx","hooks/useRefresh.ts","hooks/usePreviousValue.ts","components/Layout/Container.tsx","hooks/useIsWindowVisible.ts","hooks/useLastUpdated.ts","components/Loader/PageLoader.tsx","config/constants/meta.ts","components/Layout/Page.tsx","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","hooks/useActiveWeb3React.ts","state/predictions/helpers.ts","config/constants/endpoints.ts","utils/multicall.ts","state/predictions/queries.ts","state/types.ts","state/multicall/retry.ts","state/multicall/updater.tsx","hooks/useDebounce.ts","state/multicall/chunkArray.ts","state/transactions/updater.tsx","hooks/useEagerConnect.ts","components/DatePicker/DatePickerPortal.tsx","style/Global.tsx","components/Menu/config.ts","components/Menu/UserMenu/CopyAddress.tsx","components/Menu/UserMenu/WalletInfo.tsx","state/transactions/hooks.tsx","components/Menu/UserMenu/WalletModal.tsx","components/Menu/UserMenu/TransactionRow.tsx","components/Menu/UserMenu/WalletTransactions.tsx","components/Menu/UserMenu/WalletUserMenuItem.tsx","components/Menu/UserMenu/index.tsx","components/QuestionHelper/index.tsx","components/Menu/GlobalSettings/GasSettings.tsx","components/Menu/GlobalSettings/SettingsModal.tsx","components/Menu/GlobalSettings/index.tsx","components/Menu/index.tsx","components/SuspenseWithChunkError/index.tsx","components/EasterEgg/EasterEgg.tsx","App.tsx","Providers.tsx","index.tsx","state/user/actions.ts","utils/contractHelpers.ts","state/multicall/actions.ts","state/user/hooks/helpers.ts","config/localization/languages.ts","config/constants/contracts.ts","utils/addressHelpers.ts","state/transactions/actions.ts","utils/index.ts","utils/bigNumber.ts","utils/providers.ts","config/constants/index.ts","config/index.ts","contexts/Localization/helpers.ts"],"names":["FetchStatus","useGetmaticBalance","useState","NOT_FETCHED","fetchStatus","setFetchStatus","BIG_ZERO","balance","setBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","useEffect","a","simpleRpcProvider","getBalance","walletBalance","BigNumber","toString","SUCCESS","FAILED","fetchBalance","refresh","useTokenBalance","tokenAddress","balanceState","setBalanceState","fastRefresh","useRefresh","contract","getBep20Contract","balanceOf","res","console","error","prev","setupNetwork","provider","window","ethereum","chainId","parseInt","process","request","method","params","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","nodes","blockExplorerUrls","BASE_BSC_SCAN_URL","useAuth","t","useTranslation","useAppDispatch","activate","deactivate","toastError","useToast","login","useCallback","connectorID","connector","connectorsByName","UnsupportedChainIdError","localStorage","removeItem","connectorLocalStorageKey","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","walletConnectProvider","message","logout","getItem","walletconnect","close","types","DANGER","WARNING","INFO","alertTypeMap","alertVariants","StyledToast","styled","div","theme","mediaQueries","sm","Toast","toast","onRemove","style","ttl","props","timer","useRef","ref","removeHandler","id","title","description","type","handleRemove","current","clearTimeout","setTimeout","CSSTransition","nodeRef","timeout","onMouseEnter","onMouseLeave","variant","onClick","StyledToastContainer","ToastContainer","toasts","stackSpacing","TransitionGroup","map","index","zIndex","top","truncateHash","address","startLength","endLength","substring","length","DescriptionWithTx","txHash","children","useActiveWeb3React","as","external","href","getPolygonScanLink","updateVersion","createAction","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","userExpertMode","userSingleHopOnly","userSlippageTolerance","INITIAL_ALLOWED_SLIPPAGE","userDeadline","DEFAULT_DEADLINE_FROM_NOW","tokens","pairs","timestamp","audioPlay","isDark","userFarmStakedOnly","FarmStakedOnly","ON_FINISHED","gasPrice","GAS_PRICE_GWEI","default","createReducer","builder","addCase","state","lastUpdateVersionTimestamp","updateUserExpertMode","action","payload","updateUserSlippageTolerance","updateUserDeadline","updateUserSingleHopOnly","addSerializedToken","serializedToken","removeSerializedToken","addSerializedPair","serializedPair","token0","token1","removeSerializedPair","tokenAAddress","tokenBAddress","muteAudio","unmuteAudio","toggleTheme","updateUserFarmStakedOnly","updateGasPrice","now","addTransaction","transactions","from","hash","approval","summary","claim","Error","txs","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","callResults","addMulticallListeners","calls","options","blocksPerFetch","listeners","callListeners","forEach","call","callKey","toCallKey","removeMulticallListeners","fetchingMulticallResults","fetchingBlockNumber","errorFetchingMulticallResults","data","updateMulticallResults","results","Object","keys","PERSISTED_KEYS","store","configureStore","devTools","reducer","block","blockReducer","predictions","predictionsReducer","user","multicall","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","dispatch","useDispatch","toastContext","useContext","ToastsContext","undefined","usePollBlockNumber","isWindowVisible","useIsWindowVisible","setInterval","getBlockNumber","setBlock","clearInterval","useBlock","useSelector","useInitialBlock","initialBlock","getNodeUrl","sample","createContext","ToastsProvider","setToasts","prevToasts","kebabCase","currentToasts","filter","prevToast","Provider","value","clear","remove","toastTypes","toastInfo","toastSuccess","toastWarning","ToastListener","rpcUrl","injected","InjectedConnector","supportedChainIds","rpc","qrcode","pollingInterval","bscConnector","BscConnector","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","library","ethers","providers","Web3Provider","REWARD_RATE","ROUND_BUFFER","PAST_ROUND_COUNT","FUTURE_ROUND_COUNT","useThemeManager","toggleThemeAction","useGasPrice","userGas","ChainId","MAINNET","testnet","useGasPriceManager","blockSlice","createSlice","currentBlock","reducers","actions","RefreshContext","React","slow","fast","RefreshContextProvider","setSlow","setFast","isBrowserTabActiveRef","onVisibilityChange","document","hidden","addEventListener","removeEventListener","useIsBrowserTabActive","interval","status","PredictionStatus","INITIAL","isLoading","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","HistoryFilter","ALL","currentEpoch","intervalSeconds","minBetAmount","bufferSeconds","lastOraclePrice","toJSON","rounds","history","ledgers","claimableStatuses","initializePredictions","createAsyncThunk","getPredictionData","marketData","epochs","range","getRoundsData","roundsResponse","initialRoundData","reduce","accum","roundResponse","reduxNodeRound","serializePredictionsRoundsResponse","epoch","initializedData","getLedgerData","ledgerResponses","getClaimStatuses","merge","makeLedgerData","fetchRound","predictionContract","getPredictionsContract","response","fetchRounds","round","fetchMarketData","fetchLedgerData","fetchClaimableStatuses","fetchHistory","claimed","getBetHistory","toLowerCase","bets","transformBetResponse","fetchNodeHistory","fetchLatestUserRounds","userRounds","epochStr","Number","roundData","reduxRound","ledger","ledgerAmount","amount","closePrice","parseFloat","formatUnits","lockPrice","position","claimedAt","claimedHash","claimedBNB","claimedNetBNB","createdAt","updatedAt","toNumber","failed","startBlock","startAt","startTimestamp","startHash","lockAt","lockTimestamp","lockBlock","lockHash","lockRoundId","lockOracleId","closeRoundId","closeOracleId","closeHash","closeAt","closeBlock","totalBets","totalAmount","bullBets","bullAmount","bearBets","bearAmount","gt","BetPosition","BULL","BEAR","predictionsSlice","setPredictionStatus","setHistoryPaneState","setChartPaneState","setHistoryFilter","setCurrentEpoch","setLastOraclePrice","markBetHistoryAsCollected","betId","betIndex","findIndex","bet","extraReducers","fulfilled","newestRound","maxBy","values","futureRound","makeFutureRoundResponse","futureRounds","currentRound","i","push","makeRoundData","pending","rejected","getBalanceAmount","dividedBy","BIG_TEN","pow","getBalanceNumber","getFullDisplayBalance","displayDecimals","toFixed","formatNumber","number","minPrecision","maxPrecision","minimumFractionDigits","maximumFractionDigits","toLocaleString","formatBigNumber","remainder","mod","sub","formatBigNumberToFixed","formattedString","formatFixedNumber","split","leftSide","useTheme","StyledThemeContext","Interface","ERC20_ABI","ERC20_BYTES32_ABI","useERC20","useMemo","getSigner","usePredictionsContract","useStakingContract","getStakingContract","useContract","ABI","withSignerIfPossible","getContract","useMulticallContract","getMulticallAddress","multiCallAbi","ConnectWalletButton","onPresentConnectModal","useWalletModal","slowRefresh","usePreviousValue","Container","px","mx","maxWidth","VISIBILITY_STATE_SUPPORTED","visibilityState","isVisible","setIsVisible","handleVisibilityChange","setStateLastUpdated","previousLastUpdated","Wrapper","Page","PageLoader","DEFAULT_META","image","StyledPage","lg","PageMeta","pageMeta","path","getCustomMeta","useLocation","pathname","pageTitle","property","content","isFetching","currentLanguage","EN","languageMap","Map","set","locale","translations","LanguageContext","LanguageProvider","codeFromStorage","getLanguageCodeFromLS","languages","setState","enLocale","get","fetchLocale","currentLocale","prevState","fetchInitialLocales","setLanguage","language","has","setItem","LS_KEY","translate","key","translatedText","match","interpolatedText","dataKey","templateKey","RegExp","replace","languageContext","web3React","refEth","setprovider","Result","GRAPH_API_PREDICTION","multicallv2","abi","requireSuccess","multi","getMulticallContract","itf","utils","calldata","encodeFunctionData","tryAggregate","returnData","result","decodeFunctionResult","numberOrNull","valueNum","isNaN","betResponse","claimedBlock","claimedMATIC","claimedNetMATIC","userResponse","totalBetsBull","totalBetsBear","totalMATIC","totalMATICBull","totalMATICBear","totalBetsClaimed","totalMATICClaimed","winRate","averageMATIC","netMATIC","transformUserResponse","transformRoundResponse","positionResponse","getRoundResult","CANCELED","LIVE","roundResultPosition","WIN","LOSE","getFilteredBets","COLLECTED","UNCOLLECTED","where","first","skip","gql","getPredictionsAddress","ledgerCalls","predictionsAbi","claimableCalls","claimableResponses","claimableResponse","claimable","staticCalls","paused","PAUSED","closeTimestamp","rewardBaseCalAmount","rewardAmount","oracleCalled","serializePredictionsLedgerResponse","ledgerResponse","eq","parseBigNumberObj","fetchUserRounds","cursor","size","getUserRounds","getUserRoundsLength","roundCount","lte","waitRandom","min","ms","random","Promise","resolve","CancelledError","RetryableError","multicallContract","chunk","minBlockNumber","debug","aggregate","obj","callData","resultsBlockNumber","Updater","s","debouncedListeners","delay","debouncedValue","setDebouncedValue","handler","useDebounce","cancellations","listeningKeys","allListeners","memo","keyListeners","previousMin","Infinity","activeListeningKeys","unserializedOutdatedCallKeys","minDataBlockNumber","outdatedListeningKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","parseCallKey","chunkedCalls","items","maxChunkSize","numChunks","ceil","chunkSize","Array","ix","slice","chunkArray","c","fn","rejectCancelled","n","minWait","maxWait","completed","promise","reject","cancel","retry","fetchChunk","then","fetchBlockNumber","firstCallKeyIndex","curr","lastCallKeyIndex","catch","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","to","transactionHash","transactionIndex","flexDirection","_binanceChainListener","defineProperty","this","bsc","useEagerConnect","connectorId","isConnectorBinanceChain","isBinanceChainDefined","Reflect","StyledDatePickerPortal","card","background","colors","cardBorder","text","input","primary","primaryBright","secondary","DatePickerPortal","GlobalStyle","createGlobalStyle","config","label","icon","Flex","dropdown","Address","Tooltip","isTooltipDisplayed","contrast","invertedContrast","CopyAddress","setIsTooltipDisplayed","displayTooltip","readOnly","navigator","clipboard","permissions","writeText","queryCommandSupported","ele","createElement","body","appendChild","select","execCommand","removeChild","color","width","WalletInfo","hasLowmaticBalance","onDismiss","fontSize","textTransform","fontWeight","mb","alignItems","justifyContent","useAllTransactions","WalletView","TxnIcon","Summary","TxnLink","Link","renderIcon","txn","spin","TransactionRow","WalletTransactions","allTransactions","sortedTransactions","orderBy","minHeight","scale","textAlign","LOW_BNB_BALANCE","ModalHeader","UIKitModalHeader","gradients","bubblegum","Tabs","WalletModal","initialView","WALLET_INFO","view","minWidth","p","TRANSACTIONS","WalletUserMenuItem","onPresentWalletModal","UserMenu","useModal","avatarSrc","QuestionWrapper","QuestionHelper","placement","useTooltip","trigger","targetRef","tooltip","tooltipVisible","GasSettings","setGasPrice","ml","flexWrap","mt","mr","GAS_PRICE","instant","SettingsModal","headerBackground","overflowY","pb","bold","GlobalSettings","onPresentSettingsModal","height","Menu","userMenu","globalMenu","currentLang","code","langs","languageList","setLang","cakePriceUsd","links","profile","username","profileLink","noProfileLink","showPip","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","nextState","replaceState","location","reload","fallback","Component","EasterEgg","show","setShow","startFalling","useKonamiCheatCode","onAnimationEnd","Predictions","lazy","Staking","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","Global","exact","component","iterations","ThemeProviderWrapper","dark","Providers","Updaters","Blocklist","Boolean","BLOCKED_ADDRESSES","indexOf","ReactDOM","render","StrictMode","getElementById","signer","signerOrProvider","Contract","bep20Abi","getChainlinkOracleContract","chainlinkOracleAbi","getChainlinkOracleAddress","MultiCallAbi","StakingAbi","getStakingAddress","ADDRESS_REGEX","LOWER_HEX_REGEX","test","pcs","parseUnits","getAddress","addresses","getDexmAddress","isAddress","BASE_POLYGON_SCAN_URLS","AddressZero","connectUnchecked","getProviderOrSigner","RPC_URL","getRpcUrl","JsonRpcProvider","ROUTER_ADDRESS","BIPS_BASE","JSBI","BigInt","Percent","exponentiate","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BASE_URL","times","fetch","json"],"mappings":"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","file":"static/js/main.24a38606.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useGetmaticBalance = () => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await simpleRpcProvider.getBalance(account)\n        setBalance(new BigNumber(walletBalance.toString()))\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch {\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus])\n\n  return { balance, fetchStatus, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","// Set of helper functions to facilitate wallet setup\n\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\nexport const setupNetwork = async () => {\n  const provider = window.ethereum\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: 'Binance Smart Chain Mainnet',\n            nativeCurrency: {\n              name: 'BNB',\n              symbol: 'bnb',\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\n          },\n        ],\n      })\n      return true\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n","import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { ConnectorNames, connectorLocalStorageKey } from '@dexmex/uikit'\nimport { connectorsByName } from 'utils/web3React'\nimport { setupNetwork } from 'utils/wallet'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\n\nconst useAuth = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback(\n    (connectorID: ConnectorNames) => {\n      const connector = connectorsByName[connectorID]\n      if (connector) {\n        activate(connector, async (error: Error) => {\n          if (error instanceof UnsupportedChainIdError) {\n            const hasSetup = await setupNetwork()\n            if (hasSetup) {\n              activate(connector)\n            }\n          } else {\n            window.localStorage.removeItem(connectorLocalStorageKey)\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n              toastError(t('Provider Error'), t('No provider was found'))\n            } else if (\n              error instanceof UserRejectedRequestErrorInjected ||\n              error instanceof UserRejectedRequestErrorWalletConnect\n            ) {\n              if (connector instanceof WalletConnectConnector) {\n                const walletConnector = connector as WalletConnectConnector\n                walletConnector.walletConnectProvider = null\n              }\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\n            } else {\n              toastError(error.name, error.message)\n            }\n          }\n        })\n      } else {\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\n      }\n    },\n    [t, activate, toastError],\n  )\n\n  const logout = useCallback(() => {\n    deactivate()\n    // This localStorage key is set by @web3-react/walletconnect-connector\n    if (window.localStorage.getItem('walletconnect')) {\n      connectorsByName.walletconnect.close()\n      connectorsByName.walletconnect.walletConnectProvider = null\n    }\n    window.localStorage.removeItem(connectorLocalStorageKey)\n  }, [deactivate])\n\n  return { login, logout }\n}\n\nexport default useAuth\n","import { ReactNode } from 'react'\n\nexport const types = {\n  SUCCESS: 'success',\n  DANGER: 'danger',\n  WARNING: 'warning',\n  INFO: 'info',\n}\n\nexport type Types = typeof types[keyof typeof types]\n\nexport interface Toast {\n  id: string\n  type: Types\n  title: string\n  description?: ReactNode\n}\n\nexport interface ToastContainerProps {\n  toasts: Toast[]\n  stackSpacing?: number\n  ttl?: number\n  onRemove: (id: string) => void\n}\n\nexport interface ToastProps {\n  toast: Toast\n  onRemove: ToastContainerProps['onRemove']\n  ttl: number\n  style: Partial<CSSStyleDeclaration>\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport styled from 'styled-components'\nimport { Alert, alertVariants } from '@dexmex/uikit'\nimport { ToastProps, types } from './types'\n\nconst alertTypeMap = {\n  [types.INFO]: alertVariants.INFO,\n  [types.SUCCESS]: alertVariants.SUCCESS,\n  [types.DANGER]: alertVariants.DANGER,\n  [types.WARNING]: alertVariants.WARNING,\n}\n\nconst StyledToast = styled.div`\n  right: 16px;\n  position: fixed;\n  max-width: calc(100% - 32px);\n  transition: all 250ms ease-in;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 400px;\n  }\n`\n\nconst Toast: React.FC<ToastProps> = ({ toast, onRemove, style, ttl, ...props }) => {\n  const timer = useRef<number>()\n  const ref = useRef(null)\n  const removeHandler = useRef(onRemove)\n  const { id, title, description, type } = toast\n\n  const handleRemove = useCallback(() => removeHandler.current(id), [id, removeHandler])\n\n  const handleMouseEnter = () => {\n    clearTimeout(timer.current)\n  }\n\n  const handleMouseLeave = () => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n    }\n\n    timer.current = window.setTimeout(() => {\n      handleRemove()\n    }, ttl)\n  }\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n    }\n\n    timer.current = window.setTimeout(() => {\n      handleRemove()\n    }, ttl)\n\n    return () => {\n      clearTimeout(timer.current)\n    }\n  }, [timer, ttl, handleRemove])\n\n  return (\n    <CSSTransition nodeRef={ref} timeout={250} style={style} {...props}>\n      <StyledToast ref={ref} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Alert title={title} variant={alertTypeMap[type]} onClick={handleRemove}>\n          {description}\n        </Alert>\n      </StyledToast>\n    </CSSTransition>\n  )\n}\n\nexport default Toast\n","import React from 'react'\nimport { TransitionGroup } from 'react-transition-group'\nimport styled from 'styled-components'\nimport Toast from './Toast'\nimport { ToastContainerProps } from './types'\n\nconst ZINDEX = 1000\nconst TOP_POSITION = 80 // Initial position from the top\n\nconst StyledToastContainer = styled.div`\n  .enter,\n  .appear {\n    opacity: 0.01;\n  }\n\n  .enter.enter-active,\n  .appear.appear-active {\n    opacity: 1;\n    transition: opacity 250ms ease-in;\n  }\n\n  .exit {\n    opacity: 1;\n  }\n\n  .exit.exit-active {\n    opacity: 0.01;\n    transition: opacity 250ms ease-out;\n  }\n`\n\nconst ToastContainer: React.FC<ToastContainerProps> = ({ toasts, onRemove, ttl = 6000, stackSpacing = 24 }) => {\n  return (\n    <StyledToastContainer>\n      <TransitionGroup>\n        {toasts.map((toast, index) => {\n          const zIndex = (ZINDEX - index).toString()\n          const top = TOP_POSITION + index * stackSpacing\n\n          return (\n            <Toast key={toast.id} toast={toast} onRemove={onRemove} ttl={ttl} style={{ top: `${top}px`, zIndex }} />\n          )\n        })}\n      </TransitionGroup>\n    </StyledToastContainer>\n  )\n}\n\nexport default ToastContainer\n","/**\n * Truncate a transaction or address hash\n */\nconst truncateHash = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateHash\n","import React from 'react'\nimport { Link, Text } from '@dexmex/uikit'\nimport { getPolygonScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\n\ninterface DescriptionWithTxProps {\n  description?: string\n  txHash?: string\n}\n\nconst DescriptionWithTx: React.FC<DescriptionWithTxProps> = ({ txHash, children }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {typeof children === 'string' ? <Text as=\"p\">{children}</Text> : children}\n      {txHash && (\n        <Link external href={getPolygonScanLink(txHash, 'transaction', chainId)}>\n          {t('View on Polygonscan')}: {truncateHash(txHash, 8, 0)}\n        </Link>\n      )}\n    </>\n  )\n}\n\nexport default DescriptionWithTx\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n\nexport default updateVersion\n","import { createReducer } from '@reduxjs/toolkit'\nimport { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../config/constants'\nimport { updateVersion } from '../global/actions'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  removeSerializedPair,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateUserExpertMode,\n  updateUserSlippageTolerance,\n  updateUserDeadline,\n  updateUserSingleHopOnly,\n  updateGasPrice,\n  muteAudio,\n  unmuteAudio,\n  toggleTheme,\n  updateUserFarmStakedOnly,\n  FarmStakedOnly,\n} from './actions'\nimport { GAS_PRICE_GWEI } from './hooks/helpers'\n\nconst currentTimestamp = () => new Date().getTime()\n\nexport interface UserState {\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number\n\n  userExpertMode: boolean\n\n  // only allow swaps on direct pairs\n  userSingleHopOnly: boolean\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken\n    }\n  }\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair\n    }\n  }\n\n  timestamp: number\n  audioPlay: boolean\n  isDark: boolean\n  userFarmStakedOnly: FarmStakedOnly\n  gasPrice: string\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`\n}\n\nexport const initialState: UserState = {\n  userExpertMode: false,\n  userSingleHopOnly: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  audioPlay: true,\n  isDark: false,\n  userFarmStakedOnly: FarmStakedOnly.ON_FINISHED,\n  gasPrice: GAS_PRICE_GWEI.default,\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateVersion, (state) => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userSlippageTolerance !== 'number') {\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userDeadline !== 'number') {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp()\n    })\n    .addCase(updateUserExpertMode, (state, action) => {\n      state.userExpertMode = action.payload.userExpertMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSlippageTolerance, (state, action) => {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserDeadline, (state, action) => {\n      state.userDeadline = action.payload.userDeadline\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSingleHopOnly, (state, action) => {\n      state.userSingleHopOnly = action.payload.userSingleHopOnly\n    })\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\n      if (!state.tokens) {\n        state.tokens = {}\n      }\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\n      if (!state.tokens) {\n        state.tokens = {}\n      }\n      state.tokens[chainId] = state.tokens[chainId] || {}\n      delete state.tokens[chainId][address]\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const { chainId } = serializedPair.token0\n        state.pairs[chainId] = state.pairs[chainId] || {}\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\n      if (state.pairs[chainId]) {\n        // just delete both keys if either exists\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(muteAudio, (state) => {\n      state.audioPlay = false\n    })\n    .addCase(unmuteAudio, (state) => {\n      state.audioPlay = true\n    })\n    .addCase(toggleTheme, (state) => {\n      state.isDark = !state.isDark\n    })\n    .addCase(updateUserFarmStakedOnly, (state, { payload: { userFarmStakedOnly } }) => {\n      state.userFarmStakedOnly = userFarmStakedOnly\n    })\n    .addCase(updateGasPrice, (state, action) => {\n      state.gasPrice = action.payload.gasPrice\n    }),\n)\n","/* eslint-disable no-param-reassign */\nimport { createReducer } from '@reduxjs/toolkit'\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\n      transactions[chainId] = txs\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }),\n)\n","import { createReducer } from '@reduxjs/toolkit'\nimport {\n  addMulticallListeners,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  removeMulticallListeners,\n  toCallKey,\n  updateMulticallResults,\n} from './actions'\n\nexport interface MulticallState {\n  callListeners?: {\n    // on a per-chain basis\n    [chainId: number]: {\n      // stores for each call key the listeners' preferences\n      [callKey: string]: {\n        // stores how many listeners there are per each blocks per fetch preference\n        [blocksPerFetch: number]: number\n      }\n    }\n  }\n\n  callResults: {\n    [chainId: number]: {\n      [callKey: string]: {\n        data?: string | null\n        blockNumber?: number\n        fetchingBlockNumber?: number\n      }\n    }\n  }\n}\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\n      const listeners: MulticallState['callListeners'] = state.callListeners\n        ? state.callListeners\n        : (state.callListeners = {})\n      listeners[chainId] = listeners[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n      })\n    })\n    .addCase(\n      removeMulticallListeners,\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n    )\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) {\n          state.callResults[chainId][callKey] = {\n            fetchingBlockNumber,\n          }\n        } else {\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      calls.forEach((call) => {\n        const callKey = toCallKey(call)\n        const current = state.callResults[chainId][callKey]\n        if (!current) return // only should be dispatched if we are already fetching\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\n          delete current.fetchingBlockNumber\n          current.data = null\n          current.blockNumber = fetchingBlockNumber\n        }\n      })\n    })\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\n      Object.keys(results).forEach((callKey) => {\n        const current = state.callResults[chainId][callKey]\n        if ((current?.blockNumber ?? 0) > blockNumber) return\n        state.callResults[chainId][callKey] = {\n          data: results[callKey],\n          blockNumber,\n        }\n      })\n    }),\n)\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\nimport { useDispatch } from 'react-redux'\n\nimport predictionsReducer from './predictions'\nimport blockReducer from './block'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport multicall from './multicall/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    block: blockReducer,\n    predictions: predictionsReducer,\n    // Exchange\n    user,\n    transactions,\n    multicall,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n})\n\nstore.dispatch(updateVersion())\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppDispatch = () => useDispatch()\n\nexport default store\n","import { useContext } from 'react'\nimport { ToastsContext } from 'contexts/ToastsContext'\n\nconst useToast = () => {\n  const toastContext = useContext(ToastsContext)\n\n  if (toastContext === undefined) {\n    throw new Error('Toasts context undefined')\n  }\n\n  return toastContext\n}\n\nexport default useToast\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const usePollBlockNumber = () => {\n  const timer = useRef(null)\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  useEffect(() => {\n    if (isWindowVisible) {\n      timer.current = setInterval(async () => {\n        const blockNumber = await simpleRpcProvider.getBlockNumber()\n        dispatch(setBlock(blockNumber))\n      }, 6000)\n    } else {\n      clearInterval(timer.current)\n    }\n\n    return () => clearInterval(timer.current)\n  }, [dispatch, timer, isWindowVisible])\n}\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import sample from 'lodash/sample'\n\n// Array of available nodes to connect to\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  return sample(nodes)\n}\n\nexport default getNodeUrl\n","import React, { createContext, useCallback, useState } from 'react'\nimport { kebabCase } from 'lodash'\nimport { Toast, toastTypes } from 'components/Toast'\nimport { ToastContextApi } from './types'\n\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\n\nexport const ToastsProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\n\n  const toast = useCallback(\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\n      setToasts((prevToasts) => {\n        const id = kebabCase(title)\n\n        // Remove any existing toasts with the same id\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\n\n        return [\n          {\n            id,\n            title,\n            description,\n            type,\n          },\n          ...currentToasts,\n        ]\n      })\n    },\n    [setToasts],\n  )\n\n  const toastError = (title: Toast['title'], description?: Toast['description']) => {\n    return toast({ title, description, type: toastTypes.DANGER })\n  }\n  const toastInfo = (title: Toast['title'], description?: Toast['description']) => {\n    return toast({ title, description, type: toastTypes.INFO })\n  }\n  const toastSuccess = (title: Toast['title'], description?: Toast['description']) => {\n    return toast({ title, description, type: toastTypes.SUCCESS })\n  }\n  const toastWarning = (title: Toast['title'], description?: Toast['description']) => {\n    return toast({ title, description, type: toastTypes.WARNING })\n  }\n  const clear = () => setToasts([])\n  const remove = (id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\n  }\n\n  return (\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\n      {children}\n    </ToastsContext.Provider>\n  )\n}\n","import React from 'react'\nimport { ToastContainer } from 'components/Toast'\nimport useToast from 'hooks/useToast'\n\nconst ToastListener = () => {\n  const { toasts, remove } = useToast()\n\n  const handleRemove = (id: string) => remove(id)\n\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\n}\n\nexport default ToastListener\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from '@dexmex/uikit'\nimport { ethers } from 'ethers'\nimport getNodeUrl from './getRpcUrl'\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = POLLING_INTERVAL\n  return library\n}\n\n/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n  if (window.BinanceChain) {\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\n    return signature\n  }\n\n  /**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */\n  if (provider.provider?.wc) {\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\n    return signature\n  }\n\n  return provider.getSigner(account).signMessage(message)\n}\n","export const REWARD_RATE = 0.97\n\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\nexport const ROUND_BUFFER = 9\n\nexport const PAST_ROUND_COUNT = 5\nexport const FUTURE_ROUND_COUNT = 2\n","import { ChainId, Pair, Token } from '@pancakeswap/sdk'\nimport flatMap from 'lodash/flatMap'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AppDispatch, AppState } from '../../index'\nimport { toggleTheme as toggleThemeAction, updateGasPrice } from '../actions'\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers'\n\nexport function useThemeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const isDark = useSelector<AppState, AppState['user']['isDark']>((state) => state.user.isDark)\n\n  const toggleTheme = useCallback(() => {\n    dispatch(toggleThemeAction())\n  }, [dispatch])\n\n  return [isDark, toggleTheme]\n}\n\nexport function useGasPrice(): string {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const userGas = useSelector<AppState, AppState['user']['gasPrice']>((state) => state.user.gasPrice)\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\n}\n\nexport function useGasPriceManager(): [string, (userGasPrice: string) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const userGasPrice = useGasPrice()\n\n  const setGasPrice = useCallback(\n    (gasPrice: string) => {\n      dispatch(updateGasPrice({ gasPrice }))\n    },\n    [dispatch],\n  )\n\n  return [userGasPrice, setGasPrice]\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { BlockState } from '../types'\n\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\n\nexport const blockSlice = createSlice({\n  name: 'Block',\n  initialState,\n  reducers: {\n    setBlock: (state, action: PayloadAction<number>) => {\n      if (state.initialBlock === 0) {\n        state.initialBlock = action.payload\n      }\n\n      state.currentBlock = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setBlock } = blockSlice.actions\n\nexport default blockSlice.reducer\n","import React, { useState, useEffect, useRef } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// Check if the tab is active in the user browser\nconst useIsBrowserTabActive = () => {\n  const isBrowserTabActiveRef = useRef(true)\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden\n    }\n\n    window.addEventListener('visibilitychange', onVisibilityChange)\n\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange)\n    }\n  }, [])\n\n  return isBrowserTabActiveRef\n}\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const isBrowserTabActiveRef = useIsBrowserTabActive()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [isBrowserTabActiveRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [isBrowserTabActiveRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport range from 'lodash/range'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport {\n  Bet,\n  LedgerData,\n  HistoryFilter,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeRound,\n  BetPosition,\n} from 'state/types'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport { FUTURE_ROUND_COUNT, PAST_ROUND_COUNT, ROUND_BUFFER } from './config'\nimport {\n  getBetHistory,\n  transformBetResponse,\n  makeFutureRoundResponse,\n  makeRoundData,\n  getRoundsData,\n  getPredictionData,\n  MarketData,\n  getLedgerData,\n  makeLedgerData,\n  serializePredictionsRoundsResponse,\n  getClaimStatuses,\n  fetchLatestUserRounds,\n} from './helpers'\n\nconst initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  intervalSeconds: 300,\n  minBetAmount: '10000000000000',\n  bufferSeconds: 60,\n  lastOraclePrice: BIG_ZERO.toJSON(),\n  rounds: {},\n  history: {},\n  ledgers: {},\n  claimableStatuses: {},\n}\n\n// Thunks\ntype PredictionInitialization = Pick<\n  PredictionsState,\n  | 'status'\n  | 'currentEpoch'\n  | 'intervalSeconds'\n  | 'minBetAmount'\n  | 'rounds'\n  | 'ledgers'\n  | 'claimableStatuses'\n  | 'bufferSeconds'\n>\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string>(\n  'predictions/intialize',\n  async (account = null) => {\n    // Static values\n    const marketData = await getPredictionData()\n    const epochs =\n      marketData.currentEpoch > PAST_ROUND_COUNT\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\n        : [marketData.currentEpoch]\n\n    // Round data\n    const roundsResponse = await getRoundsData(epochs)\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n\n    const initializedData = {\n      ...marketData,\n      rounds: initialRoundData,\n      ledgers: {},\n      claimableStatuses: {},\n    }\n\n    if (!account) {\n      return initializedData\n    }\n\n    // Bet data\n    const ledgerResponses = await getLedgerData(account, epochs)\n\n    // Claim statuses\n    const claimableStatuses = await getClaimStatuses(account, epochs)\n\n    return merge({}, initializedData, {\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\n      claimableStatuses,\n    })\n  },\n)\n\nexport const fetchRound = createAsyncThunk<ReduxNodeRound, number>('predictions/fetchRound', async (epoch) => {\n  const predictionContract = getPredictionsContract()\n  const response = await predictionContract.rounds(epoch)\n  return serializePredictionsRoundsResponse(response)\n})\n\nexport const fetchRounds = createAsyncThunk<{ [key: string]: ReduxNodeRound }, number[]>(\n  'predictions/fetchRounds',\n  async (epochs) => {\n    const rounds = await getRoundsData(epochs)\n    return rounds.reduce((accum, round) => {\n      if (!round) {\n        return accum\n      }\n\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n  },\n)\n\nexport const fetchMarketData = createAsyncThunk<MarketData>('predictions/fetchMarketData', async () => {\n  const marketData = await getPredictionData()\n  return marketData\n})\n\nexport const fetchLedgerData = createAsyncThunk<LedgerData, { account: string; epochs: number[] }>(\n  'predictions/fetchLedgerData',\n  async ({ account, epochs }) => {\n    const ledgers = await getLedgerData(account, epochs)\n    return makeLedgerData(account, ledgers, epochs)\n  },\n)\n\nexport const fetchClaimableStatuses = createAsyncThunk<\n  PredictionsState['claimableStatuses'],\n  { account: string; epochs: number[] }\n>('predictions/fetchClaimableStatuses', async ({ account, epochs }) => {\n  const ledgers = await getClaimStatuses(account, epochs)\n  return ledgers\n})\n\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\n  'predictions/fetchHistory',\n  async ({ account, claimed }) => {\n    const response = await getBetHistory({\n      user: account.toLowerCase(),\n      claimed,\n    })\n    const bets = response.map(transformBetResponse)\n\n    return { account, bets }\n  },\n)\n\nexport const fetchNodeHistory = createAsyncThunk<{ account: string; bets: Bet[] }, string>(\n  'predictions/fetchNodeHistory',\n  async (account) => {\n    const userRounds = await fetchLatestUserRounds(account)\n\n    if (!userRounds) {\n      return { account, bets: [] }\n    }\n\n    const epochs = Object.keys(userRounds).map((epochStr) => Number(epochStr))\n    const roundData = await getRoundsData(epochs)\n\n    // Turn the data from the node into an Bet object that comes from the graph\n    const bets: Bet[] = roundData.reduce((accum, round) => {\n      const reduxRound = serializePredictionsRoundsResponse(round)\n      const ledger = userRounds[reduxRound.epoch]\n      const ledgerAmount = ethers.BigNumber.from(ledger.amount)\n      const closePrice = round.closePrice ? parseFloat(formatUnits(round.closePrice, 8)) : null\n      const lockPrice = round.lockPrice ? parseFloat(formatUnits(round.lockPrice, 8)) : null\n\n      const getRoundPosition = () => {\n        if (!closePrice) {\n          return null\n        }\n\n        return round.closePrice.gt(round.lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n      }\n\n      return [\n        ...accum,\n        {\n          id: null,\n          hash: null,\n          amount: parseFloat(formatUnits(ledgerAmount)),\n          position: ledger.position,\n          claimed: ledger.claimed,\n          claimedAt: null,\n          claimedHash: null,\n          claimedBNB: 0,\n          claimedNetBNB: 0,\n          createdAt: null,\n          updatedAt: null,\n          block: 0,\n          round: {\n            id: null,\n            epoch: round.epoch.toNumber(),\n            failed: false,\n            startBlock: null,\n            startAt: round.startTimestamp ? round.startTimestamp.toNumber() : null,\n            startHash: null,\n            lockAt: round.lockTimestamp ? round.lockTimestamp.toNumber() : null,\n            lockBlock: null,\n            lockPrice,\n            lockHash: null,\n            lockRoundId: round.lockOracleId ? round.lockOracleId.toString() : null,\n            closeRoundId: round.closeOracleId ? round.closeOracleId.toString() : null,\n            closeHash: null,\n            closeAt: null,\n            closePrice,\n            closeBlock: null,\n            totalBets: 0,\n            totalAmount: parseFloat(formatUnits(round.totalAmount)),\n            bullBets: 0,\n            bullAmount: parseFloat(formatUnits(round.bullAmount)),\n            bearBets: 0,\n            bearAmount: parseFloat(formatUnits(round.bearAmount)),\n            position: getRoundPosition(),\n          },\n        },\n      ]\n    }, [])\n\n    return { account, bets }\n  },\n)\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\n      state.status = action.payload\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\n      state.currentEpoch = action.payload\n    },\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\n      state.lastOraclePrice = action.payload\n    },\n    markBetHistoryAsCollected: (state, action: PayloadAction<{ account: string; betId: string }>) => {\n      const { account, betId } = action.payload\n\n      if (state.history[account]) {\n        const betIndex = state.history[account].findIndex((bet) => bet.id === betId)\n\n        if (betIndex >= 0) {\n          state.history[account][betIndex].claimed = true\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Claimable statuses\n    builder.addCase(fetchClaimableStatuses.fulfilled, (state, action) => {\n      state.claimableStatuses = merge({}, state.claimableStatuses, action.payload)\n    })\n\n    // Ledger (bet) records\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\n      state.ledgers = merge({}, state.ledgers, action.payload)\n    })\n\n    // Get static market data\n    builder.addCase(fetchMarketData.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, minBetAmount } = action.payload\n\n      // If the round has change add a new future round\n      if (state.currentEpoch !== currentEpoch) {\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\n        const futureRound = makeFutureRoundResponse(\n          newestRound.epoch + 1,\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\n        )\n\n        state.rounds[futureRound.epoch] = futureRound\n      }\n\n      state.status = status\n      state.currentEpoch = currentEpoch\n      state.intervalSeconds = intervalSeconds\n      state.minBetAmount = minBetAmount\n    })\n\n    // Initialize predictions\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, bufferSeconds, rounds, claimableStatuses, ledgers } =\n        action.payload\n      const futureRounds: ReduxNodeRound[] = []\n      const currentRound = rounds[currentEpoch]\n\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\n      }\n\n      return {\n        ...state,\n        status,\n        currentEpoch,\n        intervalSeconds,\n        bufferSeconds,\n        claimableStatuses,\n        ledgers,\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\n      }\n    })\n\n    // Get single round\n    builder.addCase(fetchRound.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, {\n        [action.payload.epoch.toString()]: action.payload,\n      })\n    })\n\n    // Get multiple rounds\n    builder.addCase(fetchRounds.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, action.payload)\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.history[account] = merge([], state.history[account] ?? [], bets)\n    })\n\n    // History from the node\n    builder.addCase(fetchNodeHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchNodeHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchNodeHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n      state.history[account] = merge([], state.history[account] ?? [], bets)\n    })\n  },\n})\n\n// Actions\nexport const {\n  setChartPaneState,\n  setCurrentEpoch,\n  setHistoryFilter,\n  setHistoryPaneState,\n  setPredictionStatus,\n  setLastOraclePrice,\n  markBetHistoryAsCollected,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\nimport { BIG_TEN } from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 MATIC and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object\n * Note: does NOT round\n */\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\n  return formatUnits(number.sub(remainder), decimals)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\n * Note: rounds\n */\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const formattedString = formatUnits(number, decimals)\n  return (+formattedString).toFixed(displayDecimals)\n}\n\n/**\n * Formats a FixedNumber like BigNumber\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\n */\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\n  // Remove decimal\n  const [leftSide] = number.toString().split('.')\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\n}\n\nexport const formatLocalisedCompactNumber = (number: number): string => {\n  const codeFromStorage = getLanguageCodeFromLS()\n  return new Intl.NumberFormat(codeFromStorage, {\n    notation: 'compact',\n    compactDisplay: 'long',\n    maximumSignificantDigits: 2,\n  }).format(number)\n}\n\nexport default formatLocalisedCompactNumber\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\nimport { useThemeManager } from 'state/user/hooks'\n\nconst useTheme = () => {\n  const [isDark, toggleTheme] = useThemeManager()\n  const theme = useContext(StyledThemeContext)\n  return { isDark, theme, toggleTheme }\n}\n\nexport default useTheme\n","import { Interface } from '@ethersproject/abi'\nimport ERC20_ABI from './erc20.json'\nimport ERC20_BYTES32_ABI from './erc20_bytes32.json'\n\nconst ERC20_INTERFACE = new Interface(ERC20_ABI)\n\nconst ERC20_BYTES32_INTERFACE = new Interface(ERC20_BYTES32_ABI)\n\nexport default ERC20_INTERFACE\nexport { ERC20_ABI, ERC20_BYTES32_INTERFACE, ERC20_BYTES32_ABI }\n","import { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport {\n  getBep20Contract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getStakingContract,\n} from 'utils/contractHelpers'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\n// Imports below migrated from Exchange useContract.ts\nimport { Contract } from '@ethersproject/contracts'\nimport { ChainId, WETH } from '@pancakeswap/sdk'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport ENS_PUBLIC_RESOLVER_ABI from '../config/abi/ens-public-resolver.json'\nimport ENS_ABI from '../config/abi/ens-registrar.json'\nimport { ERC20_BYTES32_ABI } from '../config/abi/erc20'\nimport ERC20_ABI from '../config/abi/erc20.json'\nimport WETH_ABI from '../config/abi/weth.json'\nimport multiCallAbi from '../config/abi/Multicall.json'\nimport { getContract } from '../utils'\n\nexport const useERC20 = (address: string) => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getBep20Contract(address, library.getSigner()), [address, library])\n}\n\nexport const usePredictionsContract = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getPredictionsContract(library.getSigner()), [library])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getChainlinkOracleContract(library.getSigner()), [library])\n}\n\nexport const useStakingContract = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getStakingContract(library.getSigner()), [library])\n}\n\n// Code below migrated from Exchange useContract.ts\n\n// returns null on errors\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\n  const { library, account } = useActiveWeb3React()\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport function useWETHContract(withSignerIfPossible?: boolean): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  return useContract(chainId ? WETH[chainId].address : undefined, WETH_ABI, withSignerIfPossible)\n}\n\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  let address: string | undefined\n  if (chainId) {\n    // eslint-disable-next-line default-case\n    switch (chainId) {\n      case ChainId.MAINNET:\n      case ChainId.TESTNET:\n        address = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n        break\n    }\n  }\n  return useContract(address, ENS_ABI, withSignerIfPossible)\n}\n\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\n}\n\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\n}\n\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\n}\n\nexport function useMulticallContract(): Contract | null {\n  return useContract(getMulticallAddress(), multiCallAbi, false)\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@dexmex/uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ConnectWalletButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Connect Wallet')}\n    </Button>\n  )\n}\n\nexport default ConnectWalletButton\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import React from 'react'\nimport { Box, BoxProps } from '@dexmex/uikit'\n\nconst Container: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box px={['16px', '24px']} mx=\"auto\" maxWidth=\"1200px\" {...props}>\n    {children}\n  </Box>\n)\n\nexport default Container\n","import { useEffect, useState } from 'react'\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document\n\nfunction isWindowVisible() {\n  if (!VISIBILITY_STATE_SUPPORTED) {\n    return true\n  }\n\n  return document.visibilityState === 'visible'\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible() {\n  const [isVisible, setIsVisible] = useState(isWindowVisible())\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined\n\n    const handleVisibilityChange = () => {\n      setIsVisible(isWindowVisible())\n    }\n\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  }, [setIsVisible])\n\n  return isVisible\n}\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@dexmex/uikit'\nimport Page from '../Layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import { ContextApi } from 'contexts/Localization/types'\nimport { PageMeta } from './types'\n\nexport const DEFAULT_META: PageMeta = {\n  title: 'DexMex',\n  description: 'The first decentralized exchange based on uniswap to offer peer to peer leverage trading.',\n  image: '',\n}\n\nexport const getCustomMeta = (path: string, t: ContextApi['t']): PageMeta => {\n  switch (path) {\n    case '/':\n      return {\n        title: `${t('Prediction')} | ${t('DexMex')}`,\n      }\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Helmet } from 'react-helmet-async'\nimport { useLocation } from 'react-router'\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\nimport Container from './Container'\n\nconst StyledPage = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nconst PageMeta = () => {\n  const { t } = useTranslation()\n  const { pathname } = useLocation()\n\n  const pageMeta = getCustomMeta(pathname, t) || {}\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\n  const pageTitle = title\n\n  return (\n    <Helmet>\n      <title>{pageTitle}</title>\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n    </Helmet>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  return (\n    <>\n      <PageMeta />\n      <StyledPage {...props}>{children}</StyledPage>\n    </>\n  )\n}\n\nexport default Page\n","import React, { createContext, useCallback, useEffect, useState } from 'react'\nimport { Language } from '@dexmex/uikit'\nimport { EN, languages } from 'config/localization/languages'\nimport translations from 'config/localization/translations.json'\nimport { ContextApi, ContextData, ProviderState } from './types'\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\n// Export the translations directly\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n    const codeFromStorage = getLanguageCodeFromLS()\n\n    return {\n      ...initialState,\n      currentLanguage: languages[codeFromStorage],\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      const enLocale = languageMap.get(EN.locale)\n\n      // Merge the EN locale to ensure that any locale fetched has all the keys\n      languageMap.set(language.locale, { ...enLocale, ...locale })\n      localStorage.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }\n\n  const translate = useCallback(\n    (key: string, data?: ContextData) => {\n      const translationSet = languageMap.has(currentLanguage.locale)\n        ? languageMap.get(currentLanguage.locale)\n        : languageMap.get(EN.locale)\n      const translatedText = translationSet[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n","import { useContext } from 'react'\nimport { LanguageContext } from './Provider'\n\nconst useTranslation = () => {\n  const languageContext = useContext(LanguageContext)\n\n  if (languageContext === undefined) {\n    throw new Error('Language context is undefined')\n  }\n\n  return languageContext\n}\n\nexport default useTranslation\n","import { useEffect, useState, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { simpleRpcProvider } from 'utils/providers'\n// eslint-disable-next-line import/no-unresolved\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\n/**\n * Provides a web3 provider with or without user's signer\n * Recreate web3 instance only if the provider change\n */\nconst useActiveWeb3React = (): Web3ReactContextInterface<Web3Provider> => {\n  const { library, chainId, ...web3React } = useWeb3React()\n  const refEth = useRef(library)\n  const [provider, setprovider] = useState(library || simpleRpcProvider)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider)\n      refEth.current = library\n    }\n  }, [library])\n\n  return { library: provider, chainId: chainId ?? parseInt(process.env.REACT_APP_CHAIN_ID, 10), ...web3React }\n}\n\nexport default useActiveWeb3React\n","import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\nimport { ethers } from 'ethers'\nimport {\n  Bet,\n  LedgerData,\n  BetPosition,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeLedger,\n  ReduxNodeRound,\n  Round,\n  RoundData,\n  PredictionUser,\n  HistoryFilter,\n} from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport { getPredictionsAddress } from 'utils/addressHelpers'\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\nimport {\n  BetResponse,\n  getRoundBaseFields,\n  getBetBaseFields,\n  getUserBaseFields,\n  RoundResponse,\n  TotalWonMarketResponse,\n  UserResponse,\n} from './queries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  LIVE = 'live',\n}\n\nexport const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport const transformUserResponse = (userResponse: UserResponse): PredictionUser => {\n  const {\n    id,\n    createdAt,\n    updatedAt,\n    block,\n    totalBets,\n    totalBetsBull,\n    totalBetsBear,\n    totalMATIC,\n    totalMATICBull,\n    totalMATICBear,\n    totalBetsClaimed,\n    totalMATICClaimed,\n    winRate,\n    averageMATIC,\n    netMATIC,\n  } = userResponse\n\n  return {\n    id,\n    createdAt: numberOrNull(createdAt),\n    updatedAt: numberOrNull(updatedAt),\n    block: numberOrNull(block),\n    totalBets: numberOrNull(totalBets),\n    totalBetsBull: numberOrNull(totalBetsBull),\n    totalBetsBear: numberOrNull(totalBetsBear),\n    totalMATIC: totalMATIC ? parseFloat(totalMATIC) : 0,\n    totalMATICBull: totalMATICBull ? parseFloat(totalMATICBull) : 0,\n    totalMATICBear: totalMATICBear ? parseFloat(totalMATICBear) : 0,\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\n    totalMATICClaimed: totalMATICClaimed ? parseFloat(totalMATICClaimed) : 0,\n    winRate: winRate ? parseFloat(winRate) : 0,\n    averageMATIC: averageMATIC ? parseFloat(averageMATIC) : 0,\n    netMATIC: netMATIC ? parseFloat(netMATIC) : 0,\n  }\n}\n\nconst getRoundPosition = (positionResponse: string) => {\n  if (positionResponse === 'Bull') {\n    return BetPosition.BULL\n  }\n\n  if (positionResponse === 'Bear') {\n    return BetPosition.BEAR\n  }\n\n  return null\n}\n\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    block: numberOrNull(betResponse.block),\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedAt: numberOrNull(betResponse.claimedAt),\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\n    claimedHash: betResponse.claimedHash,\n    claimedMATIC: betResponse.claimedMATIC ? parseFloat(betResponse.claimedMATIC) : 0,\n    claimedNetMATIC: betResponse.claimedNetMATIC ? parseFloat(betResponse.claimedNetMATIC) : 0,\n    createdAt: numberOrNull(betResponse.createdAt),\n    updatedAt: numberOrNull(betResponse.updatedAt),\n  } as Bet\n\n  if (betResponse.user) {\n    bet.user = transformUserResponse(betResponse.user)\n  }\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponse(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    position,\n    startAt,\n    startBlock,\n    startHash,\n    lockAt,\n    lockBlock,\n    lockHash,\n    lockPrice,\n    lockRoundId,\n    closeAt,\n    closeBlock,\n    closeHash,\n    closePrice,\n    closeRoundId,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bullAmount,\n    bearBets,\n    bearAmount,\n    bets = [],\n  } = roundResponse\n\n  return {\n    id,\n    failed,\n    startHash,\n    lockHash,\n    lockRoundId,\n    closeRoundId,\n    closeHash,\n    position: getRoundPosition(position),\n    epoch: numberOrNull(epoch),\n    startAt: numberOrNull(startAt),\n    startBlock: numberOrNull(startBlock),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\n    closeAt: numberOrNull(closeAt),\n    closeBlock: numberOrNull(closeBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\n    bearBets: numberOrNull(bearBets),\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\n    bets: bets.map(transformBetResponse),\n  }\n}\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\nexport const getFilteredBets = (bets: Bet[], filter: HistoryFilter) => {\n  switch (filter) {\n    case HistoryFilter.COLLECTED:\n      return bets.filter((bet) => bet.claimed === true)\n    case HistoryFilter.UNCOLLECTED:\n      return bets.filter((bet) => {\n        return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n      })\n    case HistoryFilter.ALL:\n    default:\n      return bets\n  }\n}\n\nexport const getTotalWon = async (): Promise<number> => {\n  const { market } = (await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getTotalWonData {\n        market(id: 1) {\n          totalMATIC\n          totalMATICTreasury\n        }\n      }\n    `,\n  )) as { market: TotalWonMarketResponse }\n\n  const totalMATIC = market.totalMATIC ? parseFloat(market.totalMATIC) : 0\n  const totalMATICTreasury = market.totalMATICTreasury ? parseFloat(market.totalMATICTreasury) : 0\n\n  return Math.max(totalMATIC - totalMATICTreasury, 0)\n}\n\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: BetHistoryWhereClause = {},\n  first = 1000,\n  skip = 0,\n): Promise<BetResponse[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getBet = async (betId: string): Promise<BetResponse> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBet($id: ID!) {\n        bet(id: $id) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n  `,\n    {\n      id: betId.toLowerCase(),\n    },\n  )\n  return response.bet\n}\n\n// V2 REFACTOR\nexport const getLedgerData = async (account: string, epochs: number[]) => {\n  const address = getPredictionsAddress()\n  const ledgerCalls = epochs.map((epoch) => ({\n    address,\n    name: 'ledger',\n    params: [epoch, account],\n  }))\n  const response = await multicallv2<PredictionsLedgerResponse[]>(predictionsAbi, ledgerCalls)\n  return response\n}\n\nexport const getClaimStatuses = async (\n  account: string,\n  epochs: number[],\n): Promise<PredictionsState['claimableStatuses']> => {\n  const address = getPredictionsAddress()\n  const claimableCalls = epochs.map((epoch) => ({\n    address,\n    name: 'claimable',\n    params: [epoch, account],\n  }))\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>(predictionsAbi, claimableCalls)\n\n  // \"claimable\" currently has a bug where it returns true on Bull bets even if the wallet did not interact with the round\n  // To get around this temporarily we check the ledger status as well to confirm that it is claimable\n  // This can be removed in Predictions V2\n  const ledgerResponses = await getLedgerData(account, epochs)\n\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\n    const { amount, claimed } = ledgerResponses[index]\n    const epoch = epochs[index]\n    const [claimable] = claimableResponse\n\n    return {\n      ...accum,\n      [epoch]: claimable && amount.gt(0) && !claimed,\n    }\n  }, {})\n}\n\nexport type MarketData = Pick<\n  PredictionsState,\n  'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount' | 'bufferSeconds'\n>\nexport const getPredictionData = async (): Promise<MarketData> => {\n  const address = getPredictionsAddress()\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused', 'bufferSeconds'].map((method) => ({\n    address,\n    name: method,\n  }))\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused], [bufferSeconds]] = await multicallv2(\n    predictionsAbi,\n    staticCalls,\n  )\n\n  return {\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: currentEpoch.toNumber(),\n    intervalSeconds: intervalSeconds.toNumber(),\n    minBetAmount: minBetAmount.toString(),\n    bufferSeconds: bufferSeconds.toNumber(),\n  }\n}\n\nexport const getRoundsData = async (epochs: number[]): Promise<PredictionsRoundsResponse[]> => {\n  const address = getPredictionsAddress()\n  const calls = epochs.map((epoch) => ({\n    address,\n    name: 'rounds',\n    params: [epoch],\n  }))\n  const response = await multicallv2<PredictionsRoundsResponse[]>(predictionsAbi, calls)\n  return response\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\n  return {\n    epoch,\n    startTimestamp,\n    lockTimestamp: null,\n    closeTimestamp: null,\n    lockPrice: null,\n    closePrice: null,\n    totalAmount: ethers.BigNumber.from(0).toJSON(),\n    bullAmount: ethers.BigNumber.from(0).toJSON(),\n    bearAmount: ethers.BigNumber.from(0).toJSON(),\n    rewardBaseCalAmount: ethers.BigNumber.from(0).toJSON(),\n    rewardAmount: ethers.BigNumber.from(0).toJSON(),\n    oracleCalled: false,\n    lockOracleId: null,\n    closeOracleId: null,\n  }\n}\n\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.epoch.toString()]: round,\n    }\n  }, {})\n}\n\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\n  amount: ledgerResponse.amount.toJSON(),\n  claimed: ledgerResponse.claimed,\n})\n\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\n  return ledgers.reduce((accum, ledgerResponse, index) => {\n    if (!ledgerResponse) {\n      return accum\n    }\n\n    // If the amount is zero that means the user did not bet\n    if (ledgerResponse.amount.eq(0)) {\n      return accum\n    }\n\n    const epoch = epochs[index].toString()\n\n    return {\n      ...accum,\n      [account]: {\n        ...accum[account],\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\n      },\n    }\n  }, {})\n}\n\n/**\n * Serializes the return from the \"rounds\" call for redux\n */\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\n  const {\n    epoch,\n    startTimestamp,\n    lockTimestamp,\n    closeTimestamp,\n    lockPrice,\n    closePrice,\n    totalAmount,\n    bullAmount,\n    bearAmount,\n    rewardBaseCalAmount,\n    rewardAmount,\n    oracleCalled,\n    lockOracleId,\n    closeOracleId,\n  } = response\n\n  return {\n    oracleCalled,\n    epoch: epoch.toNumber(),\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\n    totalAmount: totalAmount.toJSON(),\n    bullAmount: bullAmount.toJSON(),\n    bearAmount: bearAmount.toJSON(),\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\n    rewardAmount: rewardAmount.toJSON(),\n    lockOracleId: lockOracleId.toString(),\n    closeOracleId: closeOracleId.toString(),\n  }\n}\n\n/**\n * Parse serialized values back into ethers.BigNumber\n * ethers.BigNumber values are stored with the \"toJSJON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\n  return Object.keys(data).reduce((accum, key) => {\n    const value = data[key]\n\n    if (value && value?.type === 'BigNumber') {\n      return {\n        ...accum,\n        [key]: ethers.BigNumber.from(value),\n      }\n    }\n\n    return {\n      ...accum,\n      [key]: value,\n    }\n  }, {}) as K\n}\n\n/**\n * Fetches rounds a user has participated in\n */\nexport const fetchUserRounds = async (\n  account: string,\n  cursor = 0,\n  size = 1000,\n): Promise<{ [key: string]: ReduxNodeLedger }> => {\n  const contract = getPredictionsContract()\n\n  try {\n    const [rounds, ledgers] = await contract.getUserRounds(account, cursor, size)\n\n    return rounds.reduce((accum, round, index) => {\n      return {\n        ...accum,\n        [round.toString()]: serializePredictionsLedgerResponse(ledgers[index]),\n      }\n    }, {})\n  } catch {\n    // When the results run out the contract throws an error.\n    return null\n  }\n}\n\n/**\n * Fetches the latest rounds by checking the number of rounds a user has participated in first\n * in order to calculate the correct cursor\n */\nexport const fetchLatestUserRounds = async (account: string, size = 1000) => {\n  const contract = getPredictionsContract()\n\n  try {\n    const roundCount = await contract.getUserRoundsLength(account)\n\n    if (roundCount.eq(0)) {\n      return null\n    }\n\n    const cursor = roundCount.lte(size) ? 0 : roundCount.sub(size).toNumber()\n    const userRounds = await fetchUserRounds(account, cursor, size)\n\n    return userRounds\n  } catch (error) {\n    // When the results run out the contract throws an error.\n    return null\n  }\n}\n","export const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\nexport const BITQUERY_API = 'https://graphql.bitquery.io'\n","import { ethers } from 'ethers'\nimport { getMulticallContract } from 'utils/contractHelpers'\nimport { MultiCallResponse } from './types'\n\nexport interface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (example: balanceOf)\n  params?: any[] // Function params\n}\n\ninterface MulticallOptions {\n  requireSuccess?: boolean\n}\n\nconst multicall = async <T = any>(abi: any[], calls: Call[]): Promise<T> => {\n  try {\n    const multi = getMulticallContract()\n    const itf = new ethers.utils.Interface(abi)\n\n    const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n    const { returnData } = await multi.aggregate(calldata)\n\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n    return res\n  } catch (error) {\n    throw new Error(error)\n  }\n}\n\n/**\n * Multicall V2 uses the new \"tryAggregate\" function. It is different in 2 ways\n *\n * 1. If \"requireSuccess\" is false multicall will not bail out if one of the calls fails\n * 2. The return includes a boolean whether the call was successful e.g. [wasSuccessful, callResult]\n */\nexport const multicallv2 = async <T = any>(\n  abi: any[],\n  calls: Call[],\n  options: MulticallOptions = { requireSuccess: true },\n): Promise<MultiCallResponse<T>> => {\n  const { requireSuccess } = options\n  const multi = getMulticallContract()\n  const itf = new ethers.utils.Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const returnData = await multi.tryAggregate(requireSuccess, calldata)\n  const res = returnData.map((call, i) => {\n    const [result, data] = call\n    return result ? itf.decodeFunctionResult(calls[i].name, data) : null\n  })\n\n  return res\n}\n\nexport default multicall\n","export interface UserResponse {\n  id: string\n  createdAt: string\n  updatedAt: string\n  block: string\n  totalBets: string\n  totalBetsBull: string\n  totalBetsBear: string\n  totalMATIC: string\n  totalMATICBull: string\n  totalMATICBear: string\n  totalBetsClaimed: string\n  totalMATICClaimed: string\n  winRate: string\n  averageMATIC: string\n  netMATIC: string\n  bets?: BetResponse[]\n}\n\nexport interface BetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  claimedAt: string\n  claimedBlock: string\n  claimedHash: string\n  claimedMATIC: string\n  claimedNetMATIC: string\n  createdAt: string\n  updatedAt: string\n  block: string\n  user?: UserResponse\n  round?: RoundResponse\n}\n\nexport interface HistoricalBetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  user?: UserResponse\n  round: {\n    id: string\n    epoch: string\n  }\n}\n\nexport interface RoundResponse {\n  id: string\n  epoch: string\n  position: string\n  failed: boolean\n  startAt: string\n  startBlock: string\n  startHash: string\n  lockAt: string\n  lockBlock: string\n  lockHash: string\n  lockPrice: string\n  lockRoundId: string\n  closeAt: string\n  closeBlock: string\n  closeHash: string\n  closePrice: string\n  closeRoundId: string\n  totalBets: string\n  totalAmount: string\n  bullBets: string\n  bullAmount: string\n  bearBets: string\n  bearAmount: string\n  bets?: BetResponse[]\n}\n\nexport interface TotalWonMarketResponse {\n  totalMATIC: string\n  totalMATICTreasury: string\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const getRoundBaseFields = () => `\n id\n epoch\n position\n failed\n startAt\n startBlock\n startHash\n lockAt\n lockBlock\n lockHash\n lockPrice\n lockRoundId\n closeAt\n closeBlock\n closeHash\n closePrice\n closeRoundId\n totalBets\n totalAmount\n bullBets\n bullAmount\n bearBets\n bearAmount\n`\n\nexport const getBetBaseFields = () => `\n id\n hash  \n amount\n position\n claimed\n claimedAt\n claimedHash\n claimedBlock\n claimedMATIC\n claimedNetMATIC\n createdAt\n updatedAt\n`\n\nexport const getUserBaseFields = () => `\n id\n createdAt\n updatedAt\n block\n totalBets\n totalBetsBull\n totalBetsBear\n totalMATIC\n totalMATICBull\n totalMATICBear\n totalBetsClaimed\n totalMATICClaimed\n winRate\n averageMATIC\n netMATIC\n`\n","import { ThunkAction } from 'redux-thunk'\nimport { AnyAction } from '@reduxjs/toolkit'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, State, unknown, AnyAction>\n\nexport interface BigNumberToJson {\n  type: 'BigNumber'\n  hex: string\n}\n\nexport type TranslatableText =\n  | string\n  | {\n      key: string\n      data?: {\n        [key: string]: string | number\n      }\n    }\n\nexport type SerializedBigNumber = string\n\n// Block\n\nexport interface BlockState {\n  currentBlock: number\n  initialBlock: number\n}\n\n// Predictions\n\nexport enum BetPosition {\n  BULL = 'Bull',\n  BEAR = 'Bear',\n  HOUSE = 'House',\n}\n\nexport enum PredictionStatus {\n  INITIAL = 'initial',\n  LIVE = 'live',\n  PAUSED = 'paused',\n  ERROR = 'error',\n}\n\nexport interface Round {\n  id: string\n  epoch: number\n  failed?: boolean\n  startBlock: number\n  startAt: number\n  startHash: string\n  lockAt: number\n  lockBlock: number\n  lockPrice: number\n  lockHash: string\n  lockRoundId: string\n  closeRoundId: string\n  closeHash: string\n  closeAt: number\n  closePrice: number\n  closeBlock: number\n  totalBets: number\n  totalAmount: number\n  bullBets: number\n  bearBets: number\n  bearAmount: number\n  bullAmount: number\n  position: BetPosition\n  bets?: Bet[]\n}\n\nexport interface Market {\n  paused: boolean\n  epoch: number\n}\n\nexport interface Bet {\n  id?: string\n  hash?: string\n  amount: number\n  position: BetPosition\n  claimed: boolean\n  claimedAt: number\n  claimedHash: string\n  claimedMATIC: number\n  claimedNetMATIC: number\n  createdAt: number\n  updatedAt: number\n  block: number\n  user?: PredictionUser\n  round?: Round\n}\n\nexport interface PredictionUser {\n  id: string\n  createdAt: number\n  updatedAt: number\n  block: number\n  totalBets: number\n  totalBetsBull: number\n  totalBetsBear: number\n  totalMATIC: number\n  totalMATICBull: number\n  totalMATICBear: number\n  totalBetsClaimed: number\n  totalMATICClaimed: number\n  winRate: number\n  averageMATIC: number\n  netMATIC: number\n}\n\nexport interface HistoryData {\n  [key: string]: Bet[]\n}\n\nexport enum HistoryFilter {\n  ALL = 'all',\n  COLLECTED = 'collected',\n  UNCOLLECTED = 'uncollected',\n}\n\nexport interface LedgerData {\n  [key: string]: {\n    [key: string]: ReduxNodeLedger\n  }\n}\n\nexport interface RoundData {\n  [key: string]: ReduxNodeRound\n}\n\nexport interface ReduxNodeLedger {\n  position: BetPosition\n  amount: BigNumberToJson\n  claimed: boolean\n}\n\nexport interface NodeLedger {\n  position: BetPosition\n  amount: ethers.BigNumber\n  claimed: boolean\n}\n\nexport interface ReduxNodeRound {\n  epoch: number\n  startTimestamp: number | null\n  lockTimestamp: number | null\n  closeTimestamp: number | null\n  lockPrice: BigNumberToJson | null\n  closePrice: BigNumberToJson | null\n  totalAmount: BigNumberToJson\n  bullAmount: BigNumberToJson\n  bearAmount: BigNumberToJson\n  rewardBaseCalAmount: BigNumberToJson\n  rewardAmount: BigNumberToJson\n  oracleCalled: boolean\n  lockOracleId: string\n  closeOracleId: string\n}\n\nexport interface NodeRound {\n  epoch: number\n  startTimestamp: number | null\n  lockTimestamp: number | null\n  closeTimestamp: number | null\n  lockPrice: ethers.BigNumber | null\n  closePrice: ethers.BigNumber | null\n  totalAmount: ethers.BigNumber\n  bullAmount: ethers.BigNumber\n  bearAmount: ethers.BigNumber\n  rewardBaseCalAmount: ethers.BigNumber\n  rewardAmount: ethers.BigNumber\n  oracleCalled: boolean\n  closeOracleId: string\n  lockOracleId: string\n}\n\nexport interface PredictionsState {\n  status: PredictionStatus\n  isLoading: boolean\n  isHistoryPaneOpen: boolean\n  isChartPaneOpen: boolean\n  isFetchingHistory: boolean\n  historyFilter: HistoryFilter\n  currentEpoch: number\n  intervalSeconds: number\n  minBetAmount: string\n  bufferSeconds: number\n  lastOraclePrice: string\n  history: HistoryData\n  rounds?: RoundData\n  ledgers?: LedgerData\n  claimableStatuses: {\n    [key: string]: boolean\n  }\n}\n\n// Global state\n\nexport interface State {\n  block: BlockState\n  predictions: PredictionsState\n}\n","/* eslint-disable */\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n\n/* eslint-enable */\n","import { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useBlock } from 'state/block/hooks'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport useDebounce from '../../hooks/useDebounce'\nimport { CancelledError, retry, RetryableError } from './retry'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults,\n} from './actions'\nimport chunkArray from './chunkArray'\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number,\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\n  let resultsBlockNumber\n  let returnData\n  try {\n    // prettier-ignore\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\n      chunk.map((obj) => [obj.address, obj.callData])\n    )\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error)\n    throw error\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\n    throw new RetryableError('Fetched for old block number')\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number,\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param currentBlock the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  currentBlock: number | undefined,\n): string[] {\n  if (!chainId || !currentBlock) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = currentBlock - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const { currentBlock } = useBlock()\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticallContract()\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, currentBlock)\n  }, [chainId, state.callResults, listeningKeys, currentBlock])\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys],\n  )\n\n  useEffect(() => {\n    if (!currentBlock || !chainId || !multicallContract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\n\n    if (cancellations.current?.blockNumber !== currentBlock) {\n      cancellations.current?.cancellations?.forEach((c) => c())\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: currentBlock,\n      }),\n    )\n\n    cancellations.current = {\n      blockNumber: currentBlock,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, currentBlock), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500,\n        })\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: currentBlock }\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null\n                    return memo\n                  }, {}),\n                blockNumber: fetchBlockNumber,\n              }),\n            )\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', currentBlock)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: currentBlock,\n              }),\n            )\n          })\n        return cancel\n      }),\n    }\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, currentBlock])\n\n  return null\n}\n","import { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","// chunks array into chunks of maximum size\n// evenly distributes items among the chunks\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1')\n  if (items.length <= maxChunkSize) return [items]\n\n  const numChunks: number = Math.ceil(items.length / maxChunkSize)\n  const chunkSize = Math.ceil(items.length / numChunks)\n\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize))\n}\n","import React, { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Text, Flex, Link } from '@dexmex/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getPolygonScanLink } from 'utils'\nimport { useBlock } from 'state/block/hooks'\nimport useToast from 'hooks/useToast'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  currentBlock: number,\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = currentBlock - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  }\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  }\n  // otherwise every block\n  return true\n}\n\nexport default function Updater(): null {\n  const { library, chainId } = useActiveWeb3React()\n\n  const { currentBlock } = useBlock()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  const { toastError, toastSuccess } = useToast()\n\n  useEffect(() => {\n    if (!chainId || !library || !currentBlock) return\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(currentBlock, transactions[hash]))\n      .forEach((hash) => {\n        library\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              )\n\n              const toast = receipt.status === 1 ? toastSuccess : toastError\n              toast(\n                'Transaction receipt',\n                <Flex flexDirection=\"column\">\n                  <Text>{transactions[hash]?.summary ?? `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`}</Text>\n                  {chainId && (\n                    <Link external href={getPolygonScanLink(hash, 'transaction', chainId)}>\n                      View on Polygonscan\n                    </Link>\n                  )}\n                </Flex>,\n              )\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: currentBlock }))\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, transactions, currentBlock, dispatch, toastSuccess, toastError])\n\n  return null\n}\n","import { useEffect } from 'react'\nimport { connectorLocalStorageKey, ConnectorNames } from '@dexmex/uikit'\nimport useAuth from 'hooks/useAuth'\n\nconst _binanceChainListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'BinanceChain', {\n      get() {\n        return this.bsc\n      },\n      set(bsc) {\n        this.bsc = bsc\n\n        resolve()\n      },\n    }),\n  )\n\nconst useEagerConnect = () => {\n  const { login } = useAuth()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n\n        return\n      }\n\n      login(connectorId)\n    }\n  }, [login])\n}\n\nexport default useEagerConnect\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledDatePickerPortal = styled.div`\n  .react-datepicker-wrapper,\n  .react-datepicker__input-container {\n    display: block;\n  }\n\n  .react-datepicker {\n    background: ${({ theme }) => theme.card.background};\n    border-color: ${({ theme }) => theme.colors.cardBorder};\n    color: ${({ theme }) => theme.colors.text};\n    font-family: 'Kanit', sans-serif;\n  }\n\n  .react-datepicker__header {\n    background: ${({ theme }) => theme.colors.input};\n    border-color: ${({ theme }) => theme.colors.cardBorder};\n  }\n\n  .react-datepicker__current-month,\n  .react-datepicker-time__header,\n  .react-datepicker-year-header,\n  .react-datepicker__day-name,\n  .react-datepicker__day,\n  .react-datepicker__time-name {\n    color: ${({ theme }) => theme.colors.text};\n  }\n\n  .react-datepicker__day:hover,\n  .react-datepicker__month-text:hover,\n  .react-datepicker__quarter-text:hover,\n  .react-datepicker__year-text:hover {\n    background-color: ${({ theme }) => theme.colors.cardBorder};\n  }\n\n  .react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,\n  .react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after {\n    border-bottom-color: ${({ theme }) => theme.colors.cardBorder};\n  }\n\n  .react-datepicker__day--selected,\n  .react-datepicker__day--in-selecting-range,\n  .react-datepicker__day--in-range,\n  .react-datepicker__month-text--selected,\n  .react-datepicker__month-text--in-selecting-range,\n  .react-datepicker__month-text--in-range,\n  .react-datepicker__quarter-text--selected,\n  .react-datepicker__quarter-text--in-selecting-range,\n  .react-datepicker__quarter-text--in-range,\n  .react-datepicker__year-text--selected,\n  .react-datepicker__year-text--in-selecting-range,\n  .react-datepicker__year-text--in-range {\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  .react-datepicker__day--selected:hover,\n  .react-datepicker__day--in-selecting-range:hover,\n  .react-datepicker__day--in-range:hover,\n  .react-datepicker__month-text--selected:hover,\n  .react-datepicker__month-text--in-selecting-range:hover,\n  .react-datepicker__month-text--in-range:hover,\n  .react-datepicker__quarter-text--selected:hover,\n  .react-datepicker__quarter-text--in-selecting-range:hover,\n  .react-datepicker__quarter-text--in-range:hover,\n  .react-datepicker__year-text--selected:hover,\n  .react-datepicker__year-text--in-selecting-range:hover,\n  .react-datepicker__year-text--in-range:hover {\n    background-color: ${({ theme }) => theme.colors.primaryBright};\n  }\n\n  .react-datepicker__day--keyboard-selected,\n  .react-datepicker__month-text--keyboard-selected,\n  .react-datepicker__quarter-text--keyboard-selected,\n  .react-datepicker__year-text--keyboard-selected {\n    background-color: ${({ theme }) => theme.colors.secondary};\n    color: #ffffff;\n  }\n\n  .react-datepicker__day--keyboard-selected:hover,\n  .react-datepicker__month-text--keyboard-selected:hover,\n  .react-datepicker__quarter-text--keyboard-selected:hover,\n  .react-datepicker__year-text--keyboard-selected:hover {\n    background-color: ${({ theme }) => theme.colors.secondary};\n    color: #ffffff;\n  }\n\n  .react-datepicker__time-container,\n  .react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n    width: 120px;\n  }\n\n  .react-datepicker__header--time {\n    padding: 8px;\n  }\n\n  .react-datepicker__time-container\n    .react-datepicker__time\n    .react-datepicker__time-box\n    ul.react-datepicker__time-list\n    li.react-datepicker__time-list-item {\n    height: auto;\n    padding: 8px;\n  }\n`\n\nconst DatePickerPortal = () => {\n  return <StyledDatePickerPortal id=\"reactDatePicker\" />\n}\n\nexport default DatePickerPortal\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@dexmex/uikit/dist/theme'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","import { MenuEntry } from '@dexmex/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\n\nconst config: (t: ContextApi['t']) => MenuEntry[] = (t) => [\n  {\n    label: t('Home'),\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: t('Staking V1'),\n    icon: 'GroupsIcon',\n    href: 'https://dexmexswap.com/staking',\n  },\n  {\n    label: t('Staking V2'),\n    icon: 'GroupsIcon',\n    href: '/staking',\n  },\n  {\n    label: t('Prediction V1'),\n    icon: 'PredictionsIcon',\n    href: 'https://dexmexswap.com/staking',\n  },\n]\n\nexport default config\n","import React, { useState } from 'react'\nimport { Box, CopyIcon, Flex, FlexProps, IconButton } from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface CopyAddressProps extends FlexProps {\n  account: string\n}\n\nconst Wrapper = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-radius: 16px;\n  position: relative;\n`\n\nconst Address = styled.div`\n  flex: 1;\n  position: relative;\n  padding-left: 16px;\n\n  & > input {\n    background: transparent;\n    border: 0;\n    color: ${({ theme }) => theme.colors.text};\n    display: block;\n    font-weight: 600;\n    font-size: 16px;\n    padding: 0;\n    width: 100%;\n\n    &:focus {\n      outline: 0;\n    }\n  }\n\n  &:after {\n    background: linear-gradient(\n      to right,\n      ${({ theme }) => theme.colors.background}00,\n      ${({ theme }) => theme.colors.background}E6\n    );\n    content: '';\n    height: 100%;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 40px;\n  }\n`\n\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? 'inline-block' : 'none')};\n  position: absolute;\n  padding: 8px;\n  top: -38px;\n  right: 0;\n  text-align: center;\n  background-color: ${({ theme }) => theme.colors.contrast};\n  color: ${({ theme }) => theme.colors.invertedContrast};\n  border-radius: 16px;\n  opacity: 0.7;\n  width: 100px;\n`\n\nconst CopyAddress: React.FC<CopyAddressProps> = ({ account, ...props }) => {\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false)\n  const { t } = useTranslation()\n\n  const copyAddress = () => {\n    if (navigator.clipboard && navigator.permissions) {\n      navigator.clipboard.writeText(account).then(() => displayTooltip())\n    } else if (document.queryCommandSupported('copy')) {\n      const ele = document.createElement('textarea')\n      ele.value = account\n      document.body.appendChild(ele)\n      ele.select()\n      document.execCommand('copy')\n      document.body.removeChild(ele)\n      displayTooltip()\n    }\n  }\n\n  function displayTooltip() {\n    setIsTooltipDisplayed(true)\n    setTimeout(() => {\n      setIsTooltipDisplayed(false)\n    }, 1000)\n  }\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Wrapper>\n        <Address title={account}>\n          <input type=\"text\" readOnly value={account} />\n        </Address>\n        <IconButton variant=\"text\" onClick={copyAddress}>\n          <CopyIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n      </Wrapper>\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>{t('Copied')}</Tooltip>\n    </Box>\n  )\n}\n\nexport default CopyAddress\n","import React from 'react'\nimport { Box, Button, Flex, InjectedModalProps, LinkExternal, Message, Text } from '@dexmex/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetmaticBalance } from 'hooks/useTokenBalance'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPolygonScanLink } from 'utils'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport CopyAddress from './CopyAddress'\n\ninterface WalletInfoProps {\n  hasLowmaticBalance: boolean\n  onDismiss: InjectedModalProps['onDismiss']\n}\n\nconst WalletInfo: React.FC<WalletInfoProps> = ({ hasLowmaticBalance, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { balance } = useGetmaticBalance()\n  const { logout } = useAuth()\n\n  const handleLogout = () => {\n    onDismiss()\n    logout()\n  }\n\n  return (\n    <>\n      <Text color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\" fontWeight=\"bold\" mb=\"8px\">\n        {t('Your Address')}\n      </Text>\n      <CopyAddress account={account} mb=\"24px\" />\n      {hasLowmaticBalance && (\n        <Message variant=\"warning\" mb=\"24px\">\n          <Box>\n            <Text fontWeight=\"bold\">{t('MATIC Balance Low')}</Text>\n            <Text as=\"p\">{t('You need MATIC for transaction fees.')}</Text>\n          </Box>\n        </Message>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text color=\"textSubtle\">{t('MATIC Balance')}</Text>\n        <Text>{getFullDisplayBalance(balance, 18, 6)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"end\" mb=\"24px\">\n        <LinkExternal href={getPolygonScanLink(account, 'address')}>{t('View on Polygonscan')}</LinkExternal>\n      </Flex>\n      <Button variant=\"secondary\" width=\"100%\" onClick={handleLogout}>\n        {t('Disconnect Wallet')}\n      </Button>\n    </>\n  )\n}\n\nexport default WalletInfo\n","import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: {\n    summary?: string\n    approval?: { tokenAddress: string; spender: string }\n    claim?: { recipient: string }\n  },\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\n    },\n    [dispatch, chainId, account],\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        }\n        const { approval } = tx\n        if (!approval) return false\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n      }),\n    [allTransactions, spender, tokenAddress],\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  CloseIcon,\n  Heading,\n  IconButton,\n  InjectedModalProps,\n  ModalBody,\n  ModalContainer,\n  ModalHeader as UIKitModalHeader,\n  ModalTitle,\n} from '@dexmex/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { FetchStatus, useGetmaticBalance } from 'hooks/useTokenBalance'\nimport WalletInfo from './WalletInfo'\nimport WalletTransactions from './WalletTransactions'\n\nexport enum WalletView {\n  WALLET_INFO,\n  TRANSACTIONS,\n}\n\ninterface WalletModalProps extends InjectedModalProps {\n  initialView?: WalletView\n}\n\nexport const LOW_BNB_BALANCE = new BigNumber('2000000000') // 2 Gwei\n\nconst ModalHeader = styled(UIKitModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst Tabs = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 16px 24px;\n`\n\nconst WalletModal: React.FC<WalletModalProps> = ({ initialView = WalletView.WALLET_INFO, onDismiss }) => {\n  const [view, setView] = useState(initialView)\n  const { t } = useTranslation()\n  const { balance, fetchStatus } = useGetmaticBalance()\n  const hasLowmaticBalance = fetchStatus === FetchStatus.SUCCESS && balance.lte(LOW_BNB_BALANCE)\n\n  const handleClick = (newIndex: number) => {\n    setView(newIndex)\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Your Wallet')}</Heading>\n        </ModalTitle>\n        <IconButton variant=\"text\" onClick={onDismiss}>\n          <CloseIcon width=\"24px\" color=\"text\" />\n        </IconButton>\n      </ModalHeader>\n      <Tabs>\n        {/*\n        <ButtonMenu scale=\"sm\" variant=\"subtle\" onItemClick={handleClick} activeIndex={view} fullWidth>\n          <ButtonMenuItem>{t('Wallet')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('Transactions')}</ButtonMenuItem>\n        </ButtonMenu>\n        */}\n      </Tabs>\n      <ModalBody p=\"24px\" maxWidth=\"400px\" width=\"100%\">\n        {view === WalletView.WALLET_INFO && (\n          <WalletInfo hasLowmaticBalance={hasLowmaticBalance} onDismiss={onDismiss} />\n        )}\n        {view === WalletView.TRANSACTIONS && <WalletTransactions />}\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default WalletModal\n","import React from 'react'\nimport { BlockIcon, CheckmarkCircleIcon, Flex, Link, OpenNewIcon, RefreshIcon } from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getPolygonScanLink } from 'utils'\n\ninterface TransactionRowProps {\n  txn: TransactionDetails\n}\n\nconst TxnIcon = styled(Flex)`\n  align-items: center;\n  flex: none;\n  width: 24px;\n`\n\nconst Summary = styled.div`\n  flex: 1;\n  padding: 0 8px;\n`\n\nconst TxnLink = styled(Link)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  margin-bottom: 16px;\n  width: 100%;\n\n  &:hover {\n    text-decoration: none;\n  }\n`\n\nconst renderIcon = (txn: TransactionDetails) => {\n  if (!txn.receipt) {\n    return <RefreshIcon spin width=\"24px\" />\n  }\n\n  return txn.receipt?.status === 1 || typeof txn.receipt?.status === 'undefined' ? (\n    <CheckmarkCircleIcon color=\"success\" width=\"24px\" />\n  ) : (\n    <BlockIcon color=\"failure\" width=\"24px\" />\n  )\n}\n\nconst TransactionRow: React.FC<TransactionRowProps> = ({ txn }) => {\n  const { chainId } = useActiveWeb3React()\n\n  if (!txn) {\n    return null\n  }\n\n  return (\n    <TxnLink href={getPolygonScanLink(txn.hash, 'transaction', chainId)} external>\n      <TxnIcon>{renderIcon(txn)}</TxnIcon>\n      <Summary>{txn.summary ?? txn.hash}</Summary>\n      <TxnIcon>\n        <OpenNewIcon width=\"24px\" color=\"primary\" />\n      </TxnIcon>\n    </TxnLink>\n  )\n}\n\nexport default TransactionRow\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Box, Button, Flex, Text } from '@dexmex/uikit'\nimport { AppDispatch } from 'state'\nimport { useAllTransactions } from 'state/transactions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { clearAllTransactions } from 'state/transactions/actions'\nimport { orderBy } from 'lodash'\nimport TransactionRow from './TransactionRow'\n\nconst WalletTransactions: React.FC = () => {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n  const allTransactions = useAllTransactions()\n  const sortedTransactions = orderBy(allTransactions, 'addedTime', 'desc')\n\n  const handleClearAll = () => {\n    if (chainId) {\n      dispatch(clearAllTransactions({ chainId }))\n    }\n  }\n\n  return (\n    <Box minHeight=\"120px\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\" fontWeight=\"bold\">\n          {t('Recent Transactions')}\n        </Text>\n        {sortedTransactions.length > 0 && (\n          <Button scale=\"sm\" onClick={handleClearAll} variant=\"text\" px=\"0\">\n            {t('Clear all')}\n          </Button>\n        )}\n      </Flex>\n      {sortedTransactions.length > 0 ? (\n        sortedTransactions.map((txn) => <TransactionRow key={txn.hash} txn={txn} />)\n      ) : (\n        <Text textAlign=\"center\">{t('No recent transactions')}</Text>\n      )}\n    </Box>\n  )\n}\n\nexport default WalletTransactions\n","import React from 'react'\nimport { Flex, UserMenuItem, WarningIcon } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface WalletUserMenuItemProps {\n  hasLowmaticBalance: boolean\n  onPresentWalletModal: () => void\n}\n\nconst WalletUserMenuItem: React.FC<WalletUserMenuItemProps> = ({ hasLowmaticBalance, onPresentWalletModal }) => {\n  const { t } = useTranslation()\n\n  return (\n    <UserMenuItem as=\"button\" onClick={onPresentWalletModal}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n        {t('Wallet')}\n        {hasLowmaticBalance && <WarningIcon color=\"warning\" width=\"24px\" />}\n      </Flex>\n    </UserMenuItem>\n  )\n}\n\nexport default WalletUserMenuItem\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, LogoutIcon, useModal, UserMenu as UIKitUserMenu, UserMenuDivider, UserMenuItem } from '@dexmex/uikit'\nimport useAuth from 'hooks/useAuth'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { FetchStatus, useGetmaticBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletModal, { WalletView, LOW_BNB_BALANCE } from './WalletModal'\nimport WalletUserMenuItem from './WalletUserMenuItem'\n\nconst UserMenu = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { logout } = useAuth()\n  const { balance, fetchStatus } = useGetmaticBalance()\n  const [onPresentWalletModal] = useModal(<WalletModal initialView={WalletView.WALLET_INFO} />)\n  const [onPresentTransactionModal] = useModal(<WalletModal initialView={WalletView.TRANSACTIONS} />)\n  const avatarSrc = undefined\n  const hasLowmaticBalance = fetchStatus === FetchStatus.SUCCESS && balance.lte(LOW_BNB_BALANCE)\n\n  if (!account) {\n    return <ConnectWalletButton scale=\"sm\" />\n  }\n\n  return (\n    <UIKitUserMenu account={account} avatarSrc={avatarSrc}>\n      <WalletUserMenuItem hasLowmaticBalance={hasLowmaticBalance} onPresentWalletModal={onPresentWalletModal} />\n\n      <UserMenuDivider />\n      <UserMenuItem as=\"button\" onClick={logout}>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n          {t('Disconnect')}\n          <LogoutIcon />\n        </Flex>\n      </UserMenuItem>\n    </UIKitUserMenu>\n  )\n}\n\nexport default UserMenu\n","import React from 'react'\nimport { HelpIcon, useTooltip, Box, BoxProps, Placement } from '@dexmex/uikit'\nimport styled from 'styled-components'\n\ninterface Props extends BoxProps {\n  text: string | React.ReactNode\n  placement?: Placement\n}\n\nconst QuestionWrapper = styled.div`\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n`\n\nconst QuestionHelper: React.FC<Props> = ({ text, placement = 'right-end', ...props }) => {\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(text, { placement, trigger: 'hover' })\n\n  return (\n    <Box {...props}>\n      {tooltipVisible && tooltip}\n      <QuestionWrapper ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" width=\"16px\" />\n      </QuestionWrapper>\n    </Box>\n  )\n}\n\nexport default QuestionHelper\n","import React from 'react'\nimport { Flex, Button, Text } from '@dexmex/uikit'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { useTranslation } from 'contexts/Localization'\nimport { GAS_PRICE_GWEI, GAS_PRICE } from 'state/user/hooks/helpers'\nimport { useGasPriceManager } from 'state/user/hooks'\n\nconst GasSettings = () => {\n  const { t } = useTranslation()\n  const [gasPrice, setGasPrice] = useGasPriceManager()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex mb=\"12px\" alignItems=\"center\">\n        <Text>{t('Default Transaction Speed (GWEI)')}</Text>\n        <QuestionHelper\n          text={t(\n            'Adjusts the gas price (transaction fee) for your transaction. Higher GWEI = higher speed = higher fees',\n          )}\n          placement=\"top-start\"\n          ml=\"4px\"\n        />\n      </Flex>\n      <Flex flexWrap=\"wrap\">\n        <Button\n          mt=\"4px\"\n          mr=\"4px\"\n          scale=\"sm\"\n          onClick={() => {\n            setGasPrice(GAS_PRICE_GWEI.default)\n          }}\n          variant={gasPrice === GAS_PRICE_GWEI.default ? 'primary' : 'tertiary'}\n        >\n          {t('Standard (%gasPrice%)', { gasPrice: GAS_PRICE.default })}\n        </Button>\n        <Button\n          mt=\"4px\"\n          mr=\"4px\"\n          scale=\"sm\"\n          onClick={() => {\n            setGasPrice(GAS_PRICE_GWEI.fast)\n          }}\n          variant={gasPrice === GAS_PRICE_GWEI.fast ? 'primary' : 'tertiary'}\n        >\n          {t('Fast (%gasPrice%)', { gasPrice: GAS_PRICE.fast })}\n        </Button>\n        <Button\n          mr=\"4px\"\n          mt=\"4px\"\n          scale=\"sm\"\n          onClick={() => {\n            setGasPrice(GAS_PRICE_GWEI.instant)\n          }}\n          variant={gasPrice === GAS_PRICE_GWEI.instant ? 'primary' : 'tertiary'}\n        >\n          {t('Instant (%gasPrice%)', { gasPrice: GAS_PRICE.instant })}\n        </Button>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default GasSettings\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, PancakeToggle, Toggle, Flex, Modal, InjectedModalProps } from '@dexmex/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport GasSettings from './GasSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Modal\n      title={t('Settings')}\n      headerBackground=\"gradients.cardHeader\"\n      onDismiss={onDismiss}\n      style={{ maxWidth: '420px', overflowY: 'auto' }}\n    >\n      <Flex flexDirection=\"column\">\n        <Flex pb=\"24px\" flexDirection=\"column\">\n          <Text bold textTransform=\"uppercase\" fontSize=\"12px\" color=\"secondary\" mb=\"24px\">\n            {t('Global')}\n          </Text>\n          <GasSettings />\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Flex, IconButton, CogIcon, useModal } from '@dexmex/uikit'\nimport SettingsModal from './SettingsModal'\n\nconst GlobalSettings = () => {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n\n  return (\n    <Flex>\n      <IconButton onClick={onPresentSettingsModal} variant=\"text\" scale=\"sm\" mr=\"8px\">\n        <CogIcon height={22} width={22} color=\"textSubtle\" />\n      </IconButton>\n    </Flex>\n  )\n}\n\nexport default GlobalSettings\n","import React from 'react'\nimport { Menu as UikitMenu } from '@dexmex/uikit'\nimport { languageList } from 'config/localization/languages'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport config from './config'\nimport UserMenu from './UserMenu'\nimport GlobalSettings from './GlobalSettings'\n\nconst Menu = (props) => {\n  const { isDark, toggleTheme } = useTheme()\n  const { currentLanguage, setLanguage, t } = useTranslation()\n\n  return (\n    <UikitMenu\n      userMenu={<UserMenu />}\n      globalMenu={<GlobalSettings />}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={currentLanguage.code}\n      langs={languageList}\n      setLang={setLanguage}\n      cakePriceUsd=\"\"\n      links={config(t)}\n      profile={{\n        username: '',\n        image: '',\n        profileLink: '',\n        noProfileLink: true,\n        showPip: '0',\n      }}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React, { Suspense, SuspenseProps } from 'react'\n\ninterface State {\n  hasError: boolean\n}\n\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n\n  componentDidCatch(error) {\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\n\n    // Save a flag on the window object indicating that we have already had a chunk error.\n    // This prevents infinite reloads\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\n\n    // If was a chunk load error, refresh the page\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\n      window.history.replaceState(nextState, '')\n      window.location.reload()\n      return\n    }\n\n    throw error\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { fallback } = this.props\n\n    if (hasError) {\n      return fallback\n    }\n\n    return <Suspense {...this.props} />\n  }\n}\n\nexport default SuspenseWithChunkError\n","import React, { useState, useCallback } from 'react'\nimport { FallingBunnies, FallingBunniesProps, useKonamiCheatCode } from '@dexmex/uikit'\n\nconst EasterEgg: React.FC<FallingBunniesProps> = (props) => {\n  const [show, setShow] = useState(false)\n  const startFalling = useCallback(() => setShow(true), [setShow])\n  useKonamiCheatCode(startFalling)\n\n  if (show) {\n    return (\n      <div onAnimationEnd={() => setShow(false)}>\n        <FallingBunnies {...props} />\n      </div>\n    )\n  }\n  return null\n}\n\nexport default React.memo(EasterEgg)\n","import React, { lazy } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { ResetCSS } from '@dexmex/uikit'\nimport BigNumber from 'bignumber.js'\nimport useEagerConnect from 'hooks/useEagerConnect'\nimport { usePollBlockNumber } from 'state/block/hooks'\nimport { DatePickerPortal } from 'components/DatePicker'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\nimport { ToastListener } from './contexts/ToastsContext'\nimport PageLoader from './components/Loader/PageLoader'\nimport EasterEgg from './components/EasterEgg'\nimport history from './routerHistory'\n\nconst Predictions = lazy(() => import('./views/Predictions'))\n\nconst Staking = lazy(() => import('./views/Staking'))\n\nconst NotFound = lazy(() => import('./views/NotFound'))\n\n// This config is required for number formatting\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  usePollBlockNumber()\n  useEagerConnect()\n\n  return (\n    <HashRouter>\n      <ResetCSS />\n      <GlobalStyle />\n\n      <Menu>\n        <SuspenseWithChunkError fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Predictions />\n            </Route>\n\n            <Route path=\"/staking\">\n              <Staking />\n            </Route>\n\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </SuspenseWithChunkError>\n      </Menu>\n      <EasterEgg iterations={2} />\n      <ToastListener />\n      <DatePickerPortal />\n    </HashRouter>\n  )\n}\n\nexport default React.memo(App)\n","import React from 'react'\nimport { ModalProvider, light, dark } from '@dexmex/uikit'\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { HelmetProvider } from 'react-helmet-async'\nimport { Provider } from 'react-redux'\nimport { ThemeProvider } from 'styled-components'\nimport { useThemeManager } from 'state/user/hooks'\nimport { getLibrary } from 'utils/web3React'\nimport { LanguageProvider } from 'contexts/Localization'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport { ToastsProvider } from 'contexts/ToastsContext'\nimport store from 'state'\n\nconst ThemeProviderWrapper = (props) => {\n  const isDark = true\n  return <ThemeProvider theme={isDark ? dark : light} {...props} />\n}\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Provider store={store}>\n        <ToastsProvider>\n          <HelmetProvider>\n            <ThemeProviderWrapper>\n              <LanguageProvider>\n                <RefreshContextProvider>\n                  <ModalProvider>{children}</ModalProvider>\n                </RefreshContextProvider>\n              </LanguageProvider>\n            </ThemeProviderWrapper>\n          </HelmetProvider>\n        </ToastsProvider>\n      </Provider>\n    </Web3ReactProvider>\n  )\n}\n\nexport default Providers\n","import React, { useMemo, ReactNode } from 'react'\nimport ReactDOM from 'react-dom'\nimport useActiveWeb3React from './hooks/useActiveWeb3React'\nimport { BLOCKED_ADDRESSES } from './config/constants'\nimport MulticallUpdater from './state/multicall/updater'\nimport TransactionUpdater from './state/transactions/updater'\nimport App from './App'\nimport Providers from './Providers'\n\nfunction Updaters() {\n  return (\n    <>\n      <TransactionUpdater />\n      <MulticallUpdater />\n    </>\n  )\n}\n\nfunction Blocklist({ children }: { children: ReactNode }) {\n  const { account } = useActiveWeb3React()\n  const blocked: boolean = useMemo(() => Boolean(account && BLOCKED_ADDRESSES.indexOf(account) !== -1), [account])\n  if (blocked) {\n    return <div>Blocked address</div>\n  }\n  return <>{children}</>\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Blocklist>\n      <Providers>\n        <Updaters />\n        <App />\n      </Providers>\n    </Blocklist>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { createAction } from '@reduxjs/toolkit'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol?: string\n  name?: string\n}\n\nexport interface SerializedPair {\n  token0: SerializedToken\n  token1: SerializedToken\n}\n\nexport enum FarmStakedOnly {\n  ON_FINISHED = 'onFinished',\n  TRUE = 'true',\n  FALSE = 'false',\n}\n\nexport const updateUserExpertMode = createAction<{ userExpertMode: boolean }>('user/updateUserExpertMode')\nexport const updateUserSingleHopOnly = createAction<{ userSingleHopOnly: boolean }>('user/updateUserSingleHopOnly')\nexport const updateUserSlippageTolerance = createAction<{ userSlippageTolerance: number }>(\n  'user/updateUserSlippageTolerance',\n)\nexport const updateUserDeadline = createAction<{ userDeadline: number }>('user/updateUserDeadline')\nexport const addSerializedToken = createAction<{ serializedToken: SerializedToken }>('user/addSerializedToken')\nexport const removeSerializedToken = createAction<{ chainId: number; address: string }>('user/removeSerializedToken')\nexport const addSerializedPair = createAction<{ serializedPair: SerializedPair }>('user/addSerializedPair')\nexport const removeSerializedPair =\n  createAction<{ chainId: number; tokenAAddress: string; tokenBAddress: string }>('user/removeSerializedPair')\n\nexport const muteAudio = createAction<void>('user/muteAudio')\nexport const unmuteAudio = createAction<void>('user/unmuteAudio')\nexport const toggleTheme = createAction<void>('user/toggleTheme')\nexport const updateUserFarmStakedOnly = createAction<{ userFarmStakedOnly: FarmStakedOnly }>(\n  'user/updateUserFarmStakedOnly',\n)\nexport const updateGasPrice = createAction<{ gasPrice: string }>('user/updateGasPrice')\n","import { ethers } from 'ethers'\nimport { simpleRpcProvider } from 'utils/providers'\n\n// Addresses\nimport {\n  getAddress,\n  getStakingAddress,\n  getPredictionsAddress,\n  getChainlinkOracleAddress,\n  getMulticallAddress,\n} from 'utils/addressHelpers'\n\n// ABI\nimport bep20Abi from 'config/abi/erc20.json'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport StakingAbi from 'config/abi/Staking.json'\n\nimport { ChainLinkOracleContract, PredictionsContract } from './types'\n\nconst getContract = (abi: any, address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\n  const signerOrProvider = signer ?? simpleRpcProvider\n  return new ethers.Contract(address, abi, signerOrProvider)\n}\n\nexport const getBep20Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\n  return getContract(bep20Abi, address, signer)\n}\n\nexport const getPredictionsContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\n  return getContract(predictionsAbi, getPredictionsAddress(), signer) as PredictionsContract\n}\n\nexport const getChainlinkOracleContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), signer) as ChainLinkOracleContract\n}\nexport const getMulticallContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\n  return getContract(MultiCallAbi, getMulticallAddress(), signer)\n}\n\nexport const getStakingContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\n  return getContract(StakingAbi, getStakingAddress(), signer)\n}\n","import { createAction } from '@reduxjs/toolkit'\n\nexport interface Call {\n  address: string\n  callData: string\n}\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/\nexport function toCallKey(call: Call): string {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(`Invalid address: ${call.address}`)\n  }\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(`Invalid hex: ${call.callData}`)\n  }\n  return `${call.address}-${call.callData}`\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (pcs.length !== 2) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n  }\n}\n\nexport interface ListenerOptions {\n  // how often this data should be fetched, by default 1\n  readonly blocksPerFetch?: number\n}\n\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/addMulticallListeners',\n)\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\n  'multicall/removeMulticallListeners',\n)\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\n  'multicall/fetchingMulticallResults',\n)\nexport const errorFetchingMulticallResults = createAction<{\n  chainId: number\n  calls: Call[]\n  fetchingBlockNumber: number\n}>('multicall/errorFetchingMulticallResults')\nexport const updateMulticallResults = createAction<{\n  chainId: number\n  blockNumber: number\n  results: {\n    [callKey: string]: string | null\n  }\n}>('multicall/updateMulticallResults')\n","import { Token } from '@pancakeswap/sdk'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { SerializedToken } from '../actions'\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  }\n}\n\nexport function deserializeToken(serializedToken: SerializedToken): Token {\n  return new Token(\n    serializedToken.chainId,\n    serializedToken.address,\n    serializedToken.decimals,\n    serializedToken.symbol,\n    serializedToken.name,\n  )\n}\n\nexport enum GAS_PRICE {\n  default = '5',\n  fast = '6',\n  instant = '7',\n  testnet = '10',\n}\n\nexport const GAS_PRICE_GWEI = {\n  default: parseUnits(GAS_PRICE.default, 'gwei').toString(),\n  fast: parseUnits(GAS_PRICE.fast, 'gwei').toString(),\n  instant: parseUnits(GAS_PRICE.instant, 'gwei').toString(),\n  testnet: parseUnits(GAS_PRICE.testnet, 'gwei').toString(),\n}\n","import { Language } from '@dexmex/uikit'\n\nexport const AR: Language = { locale: 'ar-SA', language: 'العربية', code: 'ar' }\nexport const BN: Language = { locale: 'bn-BD', language: 'বাংলা', code: 'bn' }\nexport const EN: Language = { locale: 'en-US', language: 'English', code: 'en' }\nexport const DE: Language = { locale: 'de-DE', language: 'Deutsch', code: 'de' }\nexport const EL: Language = { locale: 'el-GR', language: 'Ελληνικά', code: 'el' }\nexport const ESES: Language = { locale: 'es-ES', language: 'Español', code: 'es-ES' }\nexport const FI: Language = { locale: 'fi-FI', language: 'Suomalainen', code: 'fi' }\nexport const FIL: Language = { locale: 'fil-PH', language: 'Filipino', code: 'fil' }\nexport const FR: Language = { locale: 'fr-FR', language: 'Français', code: 'fr' }\nexport const HI: Language = { locale: 'hi-IN', language: 'हिंदी', code: 'hi' }\nexport const HU: Language = { locale: 'hu-HU', language: 'Magyar', code: 'hu' }\nexport const ID: Language = { locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' }\nexport const IT: Language = { locale: 'it-IT', language: 'Italiano', code: 'it' }\nexport const JA: Language = { locale: 'ja-JP', language: '日本語', code: 'ja' }\nexport const KO: Language = { locale: 'ko-KR', language: '한국어', code: 'ko' }\nexport const NL: Language = { locale: 'nl-NL', language: 'Nederlands', code: 'nl' }\nexport const PL: Language = { locale: 'pl-PL', language: 'Polski', code: 'pl' }\nexport const PTBR: Language = { locale: 'pt-BR', language: 'Português (Brazil)', code: 'pt-br' }\nexport const PTPT: Language = { locale: 'pt-PT', language: 'Português', code: 'pt-pt' }\nexport const RO: Language = { locale: 'ro-RO', language: 'Română', code: 'ro' }\nexport const RU: Language = { locale: 'ru-RU', language: 'Русский', code: 'ru' }\nexport const SVSE: Language = { locale: 'sv-SE', language: 'Svenska', code: 'sv' }\nexport const TA: Language = { locale: 'ta-IN', language: 'தமிழ்', code: 'ta' }\nexport const TR: Language = { locale: 'tr-TR', language: 'Türkçe', code: 'tr' }\nexport const UK: Language = { locale: 'uk-UA', language: 'Українська', code: 'uk' }\nexport const VI: Language = { locale: 'vi-VN', language: 'Tiếng Việt', code: 'vi' }\nexport const ZHCN: Language = { locale: 'zh-CN', language: '简体中文', code: 'zh-cn' }\nexport const ZHTW: Language = { locale: 'zh-TW', language: '繁體中文', code: 'zh-tw' }\n\nexport const languages = {\n  'ar-SA': AR,\n  'bn-BD': BN,\n  'en-US': EN,\n  'de-DE': DE,\n  'el-GR': EL,\n  'es-ES': ESES,\n  'fi-FI': FI,\n  'fil-PH': FIL,\n  'fr-FR': FR,\n  'hi-IN': HI,\n  'hu-HU': HU,\n  'id-ID': ID,\n  'it-IT': IT,\n  'ja-JP': JA,\n  'ko-KR': KO,\n  'nl-NL': NL,\n  'pl-PL': PL,\n  'pt-BR': PTBR,\n  'pt-PT': PTPT,\n  'ro-RO': RO,\n  'ru-RU': RU,\n  'sv-SE': SVSE,\n  'ta-IN': TA,\n  'tr-TR': TR,\n  'uk-UA': UK,\n  'vi-VN': VI,\n  'zh-CN': ZHCN,\n  'zh-TW': ZHTW,\n}\n\nexport const languageList = Object.values(languages)\n","export default {\n  multiCall: {\n    137: '0xb43E4E36B19fab54f62a2275C4015548A7De224D',\n    97: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\n  },\n  predictions: {\n    137: '0x3aCe66F7908dE179Df43c901814251FeAF4a8242',\n    97: '',\n  },\n  chainlinkOracle: {\n    137: '0xF9680D99D6C9589e2a93a78A04A279e509205945',\n    97: '',\n  },\n  staking: {\n    137: '0xcd513d2D94Ad892B98F8E363b84C089B63bb0FcF',\n    97: '',\n  },\n  dexmtoken: {\n    137: '0xd9C774a5BB7fdE18c3e03a59c40d7c77d0B90910',\n    97: '',\n  },\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport addresses from 'config/constants/contracts'\nimport { Address } from 'config/constants/types'\n\nexport const getAddress = (address: Address): string => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\n}\n\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall)\n}\n\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions)\n}\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle)\n}\n\nexport const getStakingAddress = () => {\n  return getAddress(addresses.staking)\n}\n\nexport const getDexmAddress = () => {\n  return getAddress(addresses.dexmtoken)\n}\n","import { createAction } from '@reduxjs/toolkit'\nimport { ChainId } from '@pancakeswap/sdk'\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  from: string\n  approval?: { tokenAddress: string; spender: string }\n  claim?: { recipient: string }\n  summary?: string\n}>('transactions/addTransaction')\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  receipt: SerializableTransactionReceipt\n}>('transactions/finalizeTransaction')\nexport const checkedTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  blockNumber: number\n}>('transactions/checkedTransaction')\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@pancakeswap/sdk'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport { BASE_POLYGON_SCAN_URLS } from '../config'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nexport function getPolygonScanLink(\n  data: string | number,\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n  chainId: ChainId = 137,\n): string {\n  switch (type) {\n    case 'transaction': {\n      return `${BASE_POLYGON_SCAN_URLS[chainId]}/tx/${data}`\n    }\n    case 'token': {\n      return `${BASE_POLYGON_SCAN_URLS[chainId]}/token/${data}`\n    }\n    case 'block': {\n      return `${BASE_POLYGON_SCAN_URLS[chainId]}/block/${data}`\n    }\n    case 'countdown': {\n      return `${BASE_POLYGON_SCAN_URLS[chainId]}/block/countdown/${data}`\n    }\n    default: {\n      return `${BASE_POLYGON_SCAN_URLS[chainId]}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\n// account is optional\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { SerializedBigNumber } from 'state/types'\n\nexport const BIG_ZERO = new BigNumber(0)\nexport const BIG_ONE = new BigNumber(1)\nexport const BIG_NINE = new BigNumber(9)\nexport const BIG_TEN = new BigNumber(10)\n\nexport const ethersToSerializedBigNumber = (ethersBn: ethers.BigNumber): SerializedBigNumber =>\n  ethersToBigNumber(ethersBn).toJSON()\n\nexport const ethersToBigNumber = (ethersBn: ethers.BigNumber): BigNumber => new BigNumber(ethersBn.toString())\n","import { ethers } from 'ethers'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\n\nexport const simpleRpcProvider = new ethers.providers.JsonRpcProvider(RPC_URL)\n\nexport default null\n","import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap/sdk'\n\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much MATIC so they end up with <.01\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 MATIC\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\n\nexport const ZERO_PERCENT = new Percent('0')\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES: string[] = [\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\n]\n","import { ChainId } from '@pancakeswap/sdk'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BSC_BLOCK_TIME = 3\n\nexport const BASE_POLYGON_SCAN_URLS = {\n  137: 'https://polygonscan.com',\n}\n\n// CAKE_PER_BLOCK details\n// 40 CAKE is minted per block\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\n// 10 CAKE per block goes to CAKE syrup pool\n// 9 CAKE per block goes to Yield farms and lottery\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\n// CAKE/Block in src/views/Home/components/CakeDataRow.tsx = 17 (40 - Amount sent to burn pool)\nexport const CAKE_PER_BLOCK = new BigNumber(40)\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\nexport const CAKE_PER_YEAR = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR)\nexport const BASE_URL = 'https://pancakeswap.finance'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_URL}/add`\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_URL}/pool`\nexport const BASE_BSC_SCAN_URL = BASE_POLYGON_SCAN_URLS[ChainId.MAINNET]\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\nexport const DEFAULT_GAS_LIMIT = 200000\nexport const AUCTION_BIDDERS_TO_FETCH = 500\nexport const RECLAIM_AUCTIONS_TO_FETCH = 500\nexport const AUCTION_WHITELISTED_BIDDERS_TO_FETCH = 500\n","import { EN } from 'config/localization/languages'\n\nconst publicUrl = process.env.PUBLIC_URL\n\nexport const LS_KEY = 'pancakeswap_language'\n\nexport const fetchLocale = async (locale) => {\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\n  const data = await response.json()\n  return data\n}\n\nexport const getLanguageCodeFromLS = () => {\n  try {\n    const codeFromStorage = localStorage.getItem(LS_KEY)\n\n    return codeFromStorage || EN.locale\n  } catch {\n    return EN.locale\n  }\n}\n"],"sourceRoot":""}