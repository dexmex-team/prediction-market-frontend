{"version":3,"sources":["hooks/useStakingAmountBalance.ts","hooks/useTotalBalances.ts","views/Staking/components/Hero.tsx","hooks/useApproveConfirmTransaction.ts","views/Staking/components/UnlockButton/index.tsx","views/Staking/components/ApproveConfirmButtons/index.tsx","views/Staking/components/StakeCard/index.tsx","views/Staking/index.tsx"],"names":["useStakingAmountBalance","account","useWeb3React","fastRefresh","useRefresh","contract","getStakingContract","useState","amount","ethers","constants","Zero","rewardDebt","balanceState","setBalanceState","useEffect","a","userInfo","res","fetchBalance","useTotalBalances","dexm","getBep20Contract","getDexmAddress","supply","rewards","balanceOf","getStakingAddress","res1","totalRewards","res2","Title","styled","Card","theme","mediaQueries","sm","Heading","attrs","as","size","Blurb","Text","StyledHero","div","colors","backgroundDisabled","Hero","Button","Container","justifyContent","flexDirection","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","t","useTranslation","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","tx","wait","receipt","status","handleConfirm","UnlockButton","props","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","StyledApprovConfirmButtons","md","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","disabled","endIcon","undefined","isLoading","StyledCard","Name","StakeCard","value","setValue","isTxPending","useStakingContract","currencyContract","useERC20","valueWithTokenDecimals","BigNumber","times","pow","balance","getBalanceNumber","useTokenBalance","methods","allowance","address","call","response","currentAllowance","gt","setConfirmingUnstake","approve","toString","deposit","isConfirmingUnstake","onUserInput","input","inputProps","style","textAlign","marginTop","scale","variant","isNaN","eq","withdraw","StakingInfoCard","lg","StakingInfoCardBody","CardBody","Cards","BaseLayout","CardMidContent","textSubtle","Staking","useActiveWeb3React","formatBigNumber"],"mappings":"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","file":"static/js/8.e176dc14.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { getStakingContract } from 'utils/contractHelpers'\nimport useRefresh from './useRefresh'\n\n\ntype UseStakingAmountBalance = {\n    amount: ethers.BigNumber\n    rewardDebt: ethers.BigNumber\n  }\n\nconst useStakingAmountBalance = () => {\n    const { account } = useWeb3React()\n    const { fastRefresh } = useRefresh()\n    const contract = getStakingContract()\n\n    const [balanceState, setBalanceState] = useState<UseStakingAmountBalance>({\n        amount: ethers.constants.Zero,\n        rewardDebt: ethers.constants.Zero\n    })\n\n    \n    useEffect(() => {\n        const fetchBalance = async () => {\n            const res = await contract.userInfo(account)\n            setBalanceState(\n                {\n                    amount: res.amount,\n                    rewardDebt: res.rewardDebt\n                }\n            )\n        }\n\n        if (account) {\n            fetchBalance()\n        }\n\n    }, [account, fastRefresh, contract])\n\n\n    return balanceState\n}\n\n\nexport default useStakingAmountBalance","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { getDexmAddress, getStakingAddress, } from 'utils/addressHelpers'\nimport { getStakingContract, getBep20Contract } from 'utils/contractHelpers'\nimport useRefresh from './useRefresh'\n\n\ntype UseTotalBalances = {\n    supply: ethers.BigNumber\n    rewards: ethers.BigNumber\n  }\n\nconst useTotalBalances = () => {\n    const { fastRefresh } = useRefresh()\n    const contract = getStakingContract()\n    const dexm = getBep20Contract(getDexmAddress())\n    const [balanceState, setBalanceState] = useState<UseTotalBalances>({\n        supply: ethers.constants.Zero,\n        rewards: ethers.constants.Zero\n    })\n\n    \n    useEffect(() => {\n        const fetchBalance = async () => {\n            const res1 = await dexm.balanceOf(getStakingAddress())\n            const res2 = await contract.totalRewards()\n\n            setBalanceState(\n                {\n                    supply: res1,\n                    rewards: res2\n                }\n            )\n        }\n\n       fetchBalance()\n\n    }, [fastRefresh, contract, dexm])\n\n\n    return balanceState\n}\n\n\nexport default useTotalBalances","import React, { useState } from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Heading, Text, Button, Flex, Card, CardBody, AutoRenewIcon } from '@dexmex/uikit'\nimport Container from 'components/Layout/Container'\nimport { useWeb3React } from '@web3-react/core'\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  flex: 1;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  margin-bottom: 24px;\n`\n\nconst Blurb = styled(Text)`\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  background: ${({ theme }) => theme.colors.backgroundDisabled};\n  padding-top: 40px;\n  margin-bottom: 32px;\n  padding-bottom: 32px;\n`\n\nconst ClaimButton = styled(Button)`\n  margin-right: 0px;\n  margin-left: auto;\n  display: block;\n`\n\nconst Hero = () => {\n  return (\n    <StyledHero>\n      <Container>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\n          <Flex flexDirection=\"column\">\n            <Title>Polygon Staking</Title>\n            <Blurb>Stake DEXM and Earn Rewards</Blurb>\n          </Flex>\n        </Flex>\n      </Container>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: () => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess?: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport { Button, useWalletModal } from '@dexmex/uikit'\nimport useAuth from 'hooks/useAuth'\n\nconst UnlockButton = (props) => {\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      Unlock Wallet\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@dexmex/uikit'\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n}\n\nconst StyledApprovConfirmButtons = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n}) => {\n  return (\n    <StyledApprovConfirmButtons>\n      <Box>\n        <Button\n          disabled={isConfirming}\n          onClick={onApprove}\n          endIcon={isApproving ? spinnerIcon : undefined}\n          isLoading={isApproving}\n        >\n          {isApproving ? 'Approving' : 'Approve'}\n        </Button>\n      </Box>\n      <Flex justifyContent=\"center\">\n        <ChevronRight />\n        <ChevronBottom />\n      </Flex>\n      <Box>\n        <Button\n          onClick={onConfirm}\n          disabled={isConfirmDisabled}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? spinnerIcon : undefined}\n        >\n          {isConfirming ? 'Confirming' : 'Confirm'}\n        </Button>\n      </Box>\n    </StyledApprovConfirmButtons>\n  )\n}\n\nexport default ApproveConfirmButtons\n","import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Heading, Button, Text, Flex, Box, Card, CardBody, BalanceInput, AutoRenewIcon } from '@dexmex/uikit'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useStakingAmountBalance from 'hooks/useStakingAmountBalance'\nimport { useERC20, useStakingContract } from 'hooks/useContract'\nimport { getDexmAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport UnlockButton from '../UnlockButton'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  flex: 1;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 240px;\n  }\n`\nconst Name = styled(Heading).attrs({ as: 'h3', size: 'lg' })`\n  margin-bottom: 4px;\n  text-align: right;\n  margin-bottom: 15px;\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst StakeCard: React.FC = () => {\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const [isTxPending, setIsTxPending] = useState(false)\n\n  const contract = useStakingContract()\n\n  const currencyContract = useERC20(getDexmAddress())\n\n  const valueWithTokenDecimals = new BigNumber(value).times(new BigNumber(10).pow(18))\n\n  const balance = getBalanceNumber(useTokenBalance(getDexmAddress()).balance)\n\n  const {amount} = useStakingAmountBalance()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await currencyContract.methods.allowance(account, contract.address).call()\n          const currentAllowance = new BigNumber(response)\n\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        setConfirmingUnstake(false)\n        return currencyContract.approve(contract.address, valueWithTokenDecimals.toString())\n      },\n      onConfirm: () => {\n        setConfirmingUnstake(false)\n        return contract.deposit(valueWithTokenDecimals.toString())\n      }\n    })\n\n  const handleInputChange = (input: string) => {\n    setValue(input)\n  }\n\n  const [isConfirmingUnstake, setConfirmingUnstake] = useState(false)\n\n  const onConfirmUnstake = () => {\n    setConfirmingUnstake(true)\n    return contract.withdraw(amount.toString())\n  }\n\n  return (\n    <>\n      <StyledCard>\n        <CardBody>\n          <Name>Stake DEXM</Name>\n\n          {account ? (\n          \n          <>\n          <BalanceInput\n            value={value}\n            onUserInput={handleInputChange}\n            inputProps={{ disabled: !account || isTxPending }}\n          />\n\n          <Box style={{ textAlign: 'right', marginTop: 15 }}>\n            <Button\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => {\n                setValue(balance.toString())\n              }}\n              disabled={false}\n            >\n              Use Max\n            </Button>\n          </Box>\n          </>\n          ) : (\n            ''\n          )}\n          \n          <Box style={{ marginTop: 15 }}>\n            {!account ? (\n              <UnlockButton width=\"100%\" />\n            ) : (\n              <>\n              <ApproveConfirmButtons\n                isApproveDisabled={isConfirmed || isConfirming || isApproved}\n                isApproving={isApproving}\n                isConfirmDisabled={!isApproved || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)}\n                isConfirming={isConfirming}\n                onApprove={handleApprove}\n                onConfirm={handleConfirm}\n              />\n              \n              {amount.gt('0') ?  (\n              <Button\n                width=\"100%\"\n                style={{marginTop: 10 }}\n                onClick={onConfirmUnstake}\n                isLoading={isConfirmingUnstake}\n                endIcon={isConfirmingUnstake ? spinnerIcon : undefined}\n                disabled = {isConfirming || isApproving}\n             >\n                {isConfirmingUnstake ? 'Unstaking' : 'Unstake and Claim Rewards'}\n            </Button>\n            ):(\n                ''\n            )}\n            </>\n              \n            )}\n          </Box>\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default StakeCard\n","import React, { useState } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Heading, Button, Text, Flex, Box, Card, CardBody, BaseLayout } from '@dexmex/uikit'\nimport styled from 'styled-components'\nimport useStakingAmountBalance from 'hooks/useStakingAmountBalance'\nimport useTotalBalances from 'hooks/useTotalBalances'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport Hero from './components/Hero'\nimport Container from '../../components/Layout/Container'\nimport StakeCard from './components/StakeCard'\n\n\nconst StakingInfoCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst StakingInfoCardBody = styled(CardBody)`\n  text-align: center;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: justify;\n  margin-bottom: 32px;\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nconst Staking: React.FC = () => {\n  const { account } = useActiveWeb3React()\n  \n  const {supply, rewards} = useTotalBalances()\n\n  const {amount, rewardDebt} = useStakingAmountBalance()\n    \n  return (\n    <>\n      <Hero />\n      <Container>\n        <Cards>\n\n        <StakingInfoCard>\n            <StakingInfoCardBody>\n              <Heading color=\"contrast\" size=\"lg\">\n                DEXM Staked\n              </Heading>\n              <CardMidContent>{formatBigNumber(supply, 2)} DEXM</CardMidContent>\n            </StakingInfoCardBody>\n          </StakingInfoCard>\n          <StakingInfoCard>\n            <StakingInfoCardBody>\n              <Heading color=\"contrast\" size=\"lg\">\n                Total  Rewards\n              </Heading>\n              <CardMidContent>{formatBigNumber(rewards, 2)} MATIC</CardMidContent>\n            </StakingInfoCardBody>\n          </StakingInfoCard>\n\n          { account ? (\n          <>\n          <StakingInfoCard>\n            <StakingInfoCardBody>\n              <Heading color=\"contrast\" size=\"lg\">\n                User Staked\n              </Heading>\n              <CardMidContent>{formatBigNumber(amount, 2)} DEXM</CardMidContent>\n            </StakingInfoCardBody>\n          </StakingInfoCard>\n          <StakingInfoCard>\n            <StakingInfoCardBody>\n              <Heading color=\"contrast\" size=\"lg\">\n                Pending Rewards\n              </Heading>\n              <CardMidContent>{formatBigNumber(rewardDebt, 2)} MATIC</CardMidContent>\n            </StakingInfoCardBody>\n          </StakingInfoCard>\n          </>\n          ): (\n            ''\n          )}\n        </Cards>\n      \n        <StakeCard />\n      </Container>\n    </>\n  )\n}\n\nexport default Staking\n"],"sourceRoot":""}